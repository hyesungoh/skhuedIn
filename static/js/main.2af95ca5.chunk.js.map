{"version":3,"sources":["style/theme.ts","store/user/index.ts","components/nav/Category.tsx","pages/nav/presenter/NavPresenter.tsx","api/url.ts","hook/useUserSession.ts","pages/nav/container/NavContainer.tsx","store/suggestion/index.ts","components/TextAreaWithLabel.tsx","components/TextInputWithLabel.tsx","components/StyledButton.tsx","hook/useSuggestion.ts","pages/suggestion/presenter/SuggestionPresenter.tsx","pages/suggestion/container/SuggestionContainer.tsx","components/Introduce/Introduce.tsx","components/Introduce/HowTo.tsx","pages/introduce/presenter/IntroducePresenter.tsx","components/Library/PeopleProfile.tsx","api/blog/url.ts","api/blog/fetch.ts","components/Library/SuggestBlogCard.tsx","components/Library/List.tsx","components/Loading/Loading.tsx","components/Error/Error.tsx","pages/library/presenter/LibraryPresenter.tsx","pages/library/container/LibraryContainer.tsx","api/book/url.ts","api/book/fetch.ts","components/Book/BookProfileInfoSummaryElement.tsx","components/Book/BookProfileInfoSummary.tsx","components/Book/BookProfile.tsx","utils/convertDate.ts","components/Book/BookProfilePostDetail.tsx","components/Book/BookProfilePosts.tsx","components/Book/EmptyBookProfilePosts.tsx","components/Book/QuestionDetail.tsx","components/Modal/ModalPortal.tsx","store/question/comment/index.ts","hook/useQuestionComment.ts","components/Modal/Question/EmptyQuestionModalComments.tsx","components/Modal/Question/QuestionModalComments.tsx","components/Modal/QuestionModal.tsx","store/question/index.ts","hook/useQuestion.ts","hook/useBlogByUserId.ts","components/Modal/NewQuestion.tsx","components/Book/EmptyQuestion.tsx","components/Book/Questions.tsx","pages/book/presenter/BookPresenter.tsx","pages/notfound/Notfound.tsx","pages/book/container/BookContainer.tsx","static/images/google.png","api/socialLogin/url.ts","hook/useSocialLogin.ts","pages/signIn/presenter/SignInPresenter.tsx","pages/signIn/container/SignInContainer.tsx","pages/signinNaver/containter/SignInNaverContainer.tsx","hook/useUser.ts","components/SigninSetting/CheckStatus.tsx","components/SigninSetting/WriteYear.tsx","components/SigninSetting/Agreement.tsx","pages/signinSetting/presenter/SignInSettingPresenter.tsx","pages/signinSetting/container/SignInSettingContainer.tsx","pages/signUp/presenter/SignUpPresenter.tsx","components/Mypage/Profile.tsx","pages/mypage/presenter/MypagePresenter.tsx","pages/mypage/container/MypageContainer.tsx","hook/usePost.ts","utils/loadSuggestions.ts","components/Writing/MarkdownEditor.tsx","components/Clock/Clock.tsx","components/MarkdownSection.tsx","pages/writing/presenter/WritingPresenter.tsx","components/Post/PostSection.tsx","components/Post/WriterSection.tsx","pages/post/presenter/PostPresenter.tsx","api/post/url.ts","api/post/fetch.ts","pages/post/container/PostContainer.tsx","store/regist/index.ts","hook/useRegist.ts","hook/useSlide.ts","components/Regist/Content.tsx","components/Regist/QuestionFirst.tsx","components/Regist/QuestionSecond.tsx","components/Regist/QuestionThird.tsx","pages/registBlog/presenter/RegistBlogPresenter.tsx","pages/registBlog/container/RegistBlogContainer.tsx","components/ScrollToTop.tsx","components/Common/YearDropdown.tsx","pages/graduate/presenter/GraduatePresenter.tsx","pages/graduate/container/GraduateContainer.tsx","router/router.tsx","App.tsx","index.tsx"],"names":["theme","colors","white","background","emph","bold","shadows","normal","strong","border_intensity","layout_padding","currentUserState","atom","key","default","isSigned","Category","borderPath","path","name","BORDER_CN","currentPath","useLocation","pathname","className","to","Nav","categorys","onMypageClick","onSignOutClick","currentUser","useRecoilValue","SignedInCategory","onClick","map","category","index","baseUrl","useUserSession","TOKEN_SESSION_NAME","ID_SESSION_NAME","setCurrentUser","useSetRecoilState","setUserTokenAndId","token","id","window","sessionStorage","setItem","JSON","stringify","getUserDataWithSession","a","sessionToken","getItem","sessionId","axios","post","data","get","userData","defaults","headers","common","clearUserSession","removeItem","isUserTokenExist","NavContainer","history","useHistory","useRecoilState","NavPresenter","push","suggestionState","title","content","TextAreaWithLabel","placeholder","onChange","Wrapper","Textarea","rows","required","Placeholder","htmlFor","BaseSpan","OverSpan","styled","div","textarea","label","span","TextInputWithLabel","maxLength","Input","type","input","StyledButton","width","height","StyledBtn","button","useSuggestion","suggestion","setSuggestion","createSuggestion","useMutation","onSuccess","mutate","SuggestionPresenter","handleDebounceChange","_","debounce","e","target","value","Box","Heading","Notify","InputWrapper","main","section","h1","SuggestionContainer","Introduce","introduction","StyledSection","StyledH2","StyledP","Strong","body","forGraduate","Italic","forStudent","forAll","h2","p","i","HowTo","StyledUl","StyledOl","ul","ol","IntroducePresenter","useState","setCategory","ContentWrapper","ButtonWrapper","TransitionGroup","CSSTransition","classNames","timeout","style","PeopleProfile","blogId","entranceYear","profileImageUrl","src","alt","icon","faHeart","size","slice","GET_BLOGS_BY_CATEGORY_URL","page","sort","requestUrl","getBlogsByCategory","response","console","log","SuggestBlogCard","UnderSpan","List","blogs","categories","queryClient","useQueryClient","changeCategory","setQueryData","tempCategory","formatedCategory","reducingCategory","onCategoryClick","graduationYear","isBlog","CanMakeBlog","blog","user","profile","Loading","LoadingDiv","LoadingCircle","LoadingAnimation","keyframes","Error","ErrorDiv","LibraryPresenter","isLoading","error","LibraryContainer","useQuery","GET_BLOGS_BY_ID_URL","GET_QUESTION_BY_USERID_URL","getBlogsById","getQuestionsById","BookProfileInfoSummaryElement","element","BookProfileInfoSummary","email","categoryElement","BookProfile","blogImage","convertDate","date","year","month","day","hour","minute","second","BookProfilePostDetail","ogContent","createdDate","view","setDateFormat","BookProfilePosts","posts","EmptyBookProfilePosts","QuestionDetail","setOpenQuesIndex","ModalPortal","children","el","document","getElementById","ReactDOM","createPortal","questionCommentContentState","useQuestionComment","questionId","questionCommentContent","setQuestionCommentContent","createComment","writerUserId","invalidateQueries","EmptyQuestionModalComments","EmptyComments","QuestionModalComments","comments","length","ModalComments","comment","Comment","CommentHeader","CommentHeaderImage","writerUser","userImageUrl","CommentDate","CommentContent","QuestionModal","targetUser","isOpen","setIsOpen","setComment","useEffect","closeModal","currentTarget","setTimeout","in","Modal","ModalHeader","ModalHeaderLeft","ModalTitle","ModalInfo","ModalCloseBtn","ModalContent","ModalWrite","alert","newQuestionState","isNewQuestionModalOpenState","useQuestion","newQuestion","setIsnNewQuestionModalOpen","saveQuestion","targetId","fix","status","targetUserId","useBlogByUserId","getBlogByUserId","userId","NewQuestion","useParams","setTargetUser","setNewQuestion","setIsNewQuestionModalOpen","setTarget","parseInt","ModalBox","EmptyQuestion","onClickNewQuestion","isNewQuestionModalOpen","Fragment","StyledDiv","Questions","questions","openQuesIndex","curQuestion","setCurQuestion","question","BookPresenter","Notfound","StyledMain","StyledH1","HeaderAnimation","BookContainer","quesData","LOGIN_GOOGLE_URL","LOGIN_KAKAO_URL","LOGIN_NAVER_URL","useSocialLogin","location","PushPathWithUserData","provider","fetchURL","accessToken","firstVisit","OnGoogleLogin","result","access_token","tokenObj","OnKakaoLogin","Kakao","Auth","login","success","fail","initializeNaverLogin","naver","LoginWithNaverId","clientId","process","callbackUrl","isPopup","loginButton","color","init","OnNaverLogin","hash","split","SignInPresenter","onFailure","cookiePolicy","render","props","logoGoogle","SignInContainer","SignInNaverContainer","useUser","userYearUpdateWithId","CheckStatus","onNextClick","setStatus","checkIsChecked","SettingChildDiv","RadioDiv","RadioInput","checked","RadioLabel","NextBtn","WriteYear","onSignin","setEntranceYear","setGraduationYear","entranceCheckRef","useRef","graduationCheckRef","Date","yearDiff","getFullYear","YearList","Array","from","parentElement","current","selectYear","InputElementByCategory","InputDiv","InputCheckbox","ref","SelectLabel","BackSpan","CandidateDiv","CandidateSpan","toString","InputH2","Agreement","userName","isAgree","setIsAgree","AgreementWelcome","AgreementHeading","AgreementDiv","CheckDiv","Check","CheckLabel","SignInSettingPresenter","contentId","setContentId","prev","seeingContent","SettingDiv","SignInSettingContainer","SignUpPresenter","Profile","ImageAside","StyledImg","InfoSection","NameDiv","InfoArticle","Title","Info","InfoDiv","GraduateBtn","aside","img","article","h3","MypagePresenter","MypageContainer","pushWhenBlog","blogData","usePost","createPost","isPush","currentBlog","loadSuggestions","text","Promise","accept","reject","suggestions","preview","filter","toLowerCase","includes","MarkdownEditor","defaultValue","selectedTab","setSelectedTab","onTabChange","generateMarkdownPreview","markdown","resolve","source","childProps","writeButton","tabIndex","minEditorHeight","minPreviewHeight","heightUnits","setClockFormat","Clock","time","setTime","interval","setInterval","getHours","getMinutes","getSeconds","clearInterval","word","MarkdownSection","isReadOnly","onTitleChange","onContentChange","onSubmit","ReadOnlyInput","readOnly","SubmitAdvice","href","faMarkdown","SubmitBtn","WritingPresenter","setTitle","setContent","PostSection","lastModifiedDate","PostHeading","PostDate","WriterSection","writer","onNameClick","ProfileImageDiv","cursor","ProfileImage","ProfileInfoDiv","BoldSpan","SoftSpan","ProfileYearDiv","ProfileSeparatedDiv","PostPresenter","GET_POST_BY_ID_URL","getPostById","PostContainer","slideIdState","contentState","profileImageState","undefined","questionFirstState","questionSecondState","questionThirdState","useRegist","profileImage","registBlog","formData","FormData","append","method","url","params","file","res","onError","useSlide","slideId","setSlideId","resetContent","useResetRecoilState","resetProfileImage","questionFirst","resetQuestionFirst","questionSecond","resetQuestionSecond","questionThird","resetQuestionThird","onClickNext","onClickBefore","onEndOfSlide","all","Content","setProfileImage","previewImage","setPreviewImage","ImageInputDiv","ClearPreviewBtn","PreviewImage","ImageInputLabel","ImageInput","files","targetFile","reader","FileReader","onloadend","readAsDataURL","Greeting","QuestionFirst","setQuestionFirst","QuestionSecond","setQuestionSecond","QuestionThird","setQuestionThird","RegistBlogPresenter","slideList","RegistBlogContainer","withRouter","scroll","YearDropdown","startYear","graduateYear","setGraduateYear","CheckBokRef","GraduatePresenter","GraduateContainer","TransitionRouter","exact","component","MyRouter","App","QueryClient","QueryClientProvider","client"],"mappings":"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","file":"static/js/main.2af95ca5.chunk.js","sourcesContent":["import { DefaultTheme } from \"styled-components\";\n\nconst colors = {\n    white: \"#f6f5f5\",\n    background: \"#d3e0ea\",\n    emph: \"#1687a7\",\n    bold: \"#276678\",\n};\n\nconst shadows = {\n    normal: \"0 3px 6px rgba(0, 0, 0, 0.12), 0 3px 6px rgba(0, 0, 0, 0.18)\",\n    strong: \"0 19px 38px rgba(0, 0, 0, 0.2), 0 15px 12px rgba(0, 0, 0, 0.1)\",\n};\n\nconst theme: DefaultTheme = {\n    colors,\n    shadows,\n    border_intensity: \"20px\",\n    layout_padding: \"0px 6vw\",\n};\n\nexport default theme;\n","import { atom } from \"recoil\";\nimport { ICurrentUser } from \"types\";\n\nexport const currentUserState = atom<ICurrentUser>({\n    key: \"currentUserState\",\n    default: { isSigned: false },\n});\n","import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\n\ntype CategoryProps = {\n    path: string;\n    name: string;\n};\n\nconst Category = ({ path, name }: CategoryProps) => {\n    const CATEGORY_CN: string = \"nav__category__element\";\n    const BORDER_CN: string = \"nav__category__element__border\";\n    const BORDER_SELECTED_CN: string =\n        \"nav__category__element__border--selected\";\n\n    const currentPath = useLocation().pathname;\n\n    const giveCategoryClass = (borderPath: string) => {\n        if (currentPath === borderPath) {\n            return `${BORDER_CN} ${BORDER_SELECTED_CN}`;\n        } else {\n            return BORDER_CN;\n        }\n    };\n\n    return (\n        <div className={CATEGORY_CN}>\n            <span></span>\n            <Link to={`/${path}`}>\n                <span>{name}</span>\n            </Link>\n            <span className={giveCategoryClass(`/${path}`)}></span>\n        </div>\n    );\n};\n\nexport default Category;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { currentUserState } from \"store/user\";\nimport Category from \"components/nav/Category\";\nimport \"pages/nav/nav.scss\";\n\ninterface INav {\n    categorys: { path: string; name: string }[];\n    onMypageClick: () => void;\n    onSignOutClick: () => void;\n}\n\nconst Nav = ({\n    categorys,\n    onMypageClick,\n    onSignOutClick,\n}: INav) => {\n    const currentUser = useRecoilValue(currentUserState);\n\n    const SignedInCategory = () => (\n        <div className=\"nav__category__element nav__dropdown\">\n            <span></span>\n            <span>설정</span>\n            <span className=\"nav__dropdown__border\"></span>\n\n            <div className=\"nav__dropdown--content\">\n                <span onClick={onMypageClick}>마이페이지</span>\n                {/* <span onClick={onSettingClick}>설정</span> */}\n                <span onClick={onSignOutClick}>로그아웃</span>\n            </div>\n        </div>\n    );\n\n    return (\n        <div className=\"nav\">\n            <div className=\"nav__right\">\n                <div className=\"nav__right__logo\">\n                    <h2>\n                        <Link to=\"/\">\n                            SKHUED{\" \"}\n                            <span className=\"nav__right__logo--emph\">IN</span>\n                        </Link>\n                    </h2>\n                </div>\n                {/*\n                검색창\n                <div className=\"nav__right__search\">\n                    <input type=\"text\"></input>\n                </div>\n                */}\n            </div>\n\n            <div className=\"nav__category\">\n                {categorys.map((category, index) => (\n                    <Category\n                        key={index}\n                        path={category.path}\n                        name={category.name}\n                    />\n                ))}\n\n                {currentUser.isSigned ? (\n                    <SignedInCategory />\n                ) : (\n                    <Category path=\"signin\" name=\"로그인\" />\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Nav;\n","// export const baseUrl: string = \"http://localhost:8080\";\n// export const baseUrl: string = \"http://ec2-52-79-79-61.ap-northeast-2.compute.amazonaws.com/\";\nexport const baseUrl: string = \"https://dev-skhuedin-api.shop\";\n","import { useSetRecoilState } from \"recoil\";\nimport axios from \"axios\";\n\nimport { currentUserState } from \"store/user\";\nimport { baseUrl } from \"api/url\";\nimport { IGetUserById } from \"types/fetch\";\n\ninterface SetUserTokenAndIdProps {\n    token: string;\n    id: number;\n}\n\nconst useUserSession = () => {\n    const TOKEN_SESSION_NAME: string = \"userToken\";\n    const ID_SESSION_NAME: string = \"userId\";\n\n    const setCurrentUser = useSetRecoilState(currentUserState);\n\n    const getUserDataWithSession = async () => {\n        const sessionToken = window.sessionStorage.getItem(TOKEN_SESSION_NAME);\n        const sessionId = window.sessionStorage.getItem(ID_SESSION_NAME);\n\n        // session에 저장된 데이터가 없을 시\n        if (!sessionToken || !sessionId) return;\n\n        const {\n            data: { data },\n        } = await axios.post(`${baseUrl}/api/token/validate`, {\n            token: sessionToken,\n        });\n\n        // 인증 절차에서 false를 반환받을 시\n        if (!data) return;\n\n        const userData = await axios.get<IGetUserById>(\n            `${baseUrl}/api/users/${sessionId}`\n        );\n\n        // 글로벌 상태관리를 위한 저장\n        setCurrentUser({\n            ...userData.data,\n            isSigned: true,\n        });\n\n        // axios 호출 시에 토큰 정보를 포함하기 위해 저장\n        axios.defaults.headers.common[\n            \"Authorization\"\n        ] = `Bearer ${sessionToken}`;\n    };\n\n    const setUserTokenAndId = ({ token, id }: SetUserTokenAndIdProps) => {\n        window.sessionStorage.setItem(TOKEN_SESSION_NAME, token);\n        window.sessionStorage.setItem(ID_SESSION_NAME, JSON.stringify(id));\n    };\n\n    const clearUserSession = () => {\n        window.sessionStorage.removeItem(TOKEN_SESSION_NAME);\n        window.sessionStorage.removeItem(ID_SESSION_NAME);\n    };\n\n    const isUserTokenExist = () => {\n        const sessionToken = window.sessionStorage.getItem(TOKEN_SESSION_NAME);\n        return sessionToken;\n    };\n\n    return {\n        setUserTokenAndId,\n        getUserDataWithSession,\n        clearUserSession,\n        isUserTokenExist,\n    };\n};\n\nexport default useUserSession;\n","import { useHistory } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\n\nimport { currentUserState } from \"store/user\";\nimport NavPresenter from \"pages/nav/presenter/NavPresenter\";\nimport useUserSession from \"hook/useUserSession\";\n\nconst NavContainer = () => {\n    const history = useHistory();\n    const categorys = [\n        // { path: \"\", name: \"이야기\" },\n        { path: \"introduce\", name: \"소개\" },\n        { path: \"\", name: \"책장\" },\n        { path: \"suggestion\", name: \"사서에게\" },\n    ];\n\n    const [currentUser, setCurrentUser] = useRecoilState(currentUserState);\n    const { clearUserSession } = useUserSession();\n\n    const onMypageClick = () => {\n        history.push(`/mypage/${currentUser.data?.id}`);\n    };\n\n    const onSignOutClick = () => {\n        setCurrentUser({ isSigned: false });\n        clearUserSession();\n        history.push(\"/\");\n    };\n\n    return (\n        <NavPresenter\n            categorys={categorys}\n            onMypageClick={onMypageClick}\n            onSignOutClick={onSignOutClick}\n        />\n    );\n};\n\nexport default NavContainer;\n","import { atom } from \"recoil\";\n\ninterface ISuggestion {\n    title: string;\n    content: string;\n}\n\nexport const suggestionState = atom<ISuggestion>({\n    key: \"suggestionState\",\n    default: { title: \"\", content: \"\" },\n});\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface TextAreaWithLabelProps {\n    placeholder: string;\n    name: string;\n    onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n}\n\nconst TextAreaWithLabel = ({\n    placeholder,\n    name,\n    onChange,\n}: TextAreaWithLabelProps) => {\n    return (\n        <Wrapper>\n            <Textarea\n                id={name}\n                name={name}\n                rows={10}\n                onChange={onChange}\n                required\n            />\n            <Placeholder htmlFor={name}>{placeholder}</Placeholder>\n            <BaseSpan></BaseSpan>\n            <OverSpan></OverSpan>\n        </Wrapper>\n    );\n};\n\nexport default TextAreaWithLabel;\n\nconst Wrapper = styled.div`\n    position: relative;\n    margin-top: 2rem;\n`;\n\nconst Textarea = styled.textarea`\n    all: unset;\n    width: 100%;\n    height: 150px;\n    white-space: pre-line;\n`;\n\nconst Placeholder = styled.label`\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform-origin: left;\n    transition: all 0.3s;\n\n    ${Textarea}:focus ~ &,\n    ${Textarea}:valid ~ & {\n        transform: scale(0.8) translateY(-2rem);\n    }\n`;\n\nconst BaseSpan = styled.span`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 3px;\n    background-color: ${({ theme }) => theme.colors.background};\n`;\n\nconst OverSpan = styled(BaseSpan)`\n    background-color: ${({ theme }) => theme.colors.emph};\n    transform: scaleX(0);\n    transform-origin: left;\n    transition: transform 0.3s;\n\n    ${Textarea}:focus ~ &,\n    ${Textarea}:valid ~ & {\n        transform: scaleX(1);\n    }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface TextInputWithLabelProps {\n    name: string;\n    maxLength?: number;\n    placeholder: string;\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst TextInputWithLabel = ({\n    placeholder,\n    name,\n    onChange,\n    maxLength,\n}: TextInputWithLabelProps) => {\n    return (\n        <Wrapper>\n            <Input\n                type=\"text\"\n                id={name}\n                name={name}\n                onChange={onChange}\n                maxLength={maxLength ? maxLength : 100}\n                required\n            />\n            <Placeholder htmlFor={name}>{placeholder}</Placeholder>\n            <BaseSpan></BaseSpan>\n            <OverSpan></OverSpan>\n        </Wrapper>\n    );\n};\n\nexport default TextInputWithLabel;\n\nconst Wrapper = styled.div`\n    position: relative;\n    width: 100%;\n    margin-top: 2rem;\n`;\n\nconst Input = styled.input`\n    all: unset;\n    width: 100%;\n    height: 50px;\n`;\n\nconst Placeholder = styled.label`\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform-origin: left;\n    transition: all 0.3s;\n\n    ${Input}:focus ~ &,\n    ${Input}:valid ~ & {\n        transform: scale(0.8) translateY(-1rem);\n    }\n`;\n\nconst BaseSpan = styled.span`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 3px;\n    background-color: ${({ theme }) => theme.colors.background};\n`;\n\nconst OverSpan = styled(BaseSpan)`\n    background-color: ${({ theme }) => theme.colors.emph};\n    transform: scaleX(0);\n    transform-origin: left;\n    transition: transform 0.3s;\n\n    ${Input}:focus ~ &,\n    ${Input}:valid ~ & {\n        transform: scaleX(1);\n    }\n`;\n","import styled from \"styled-components\";\n\ninterface StyledButtonProps {\n    type: \"button\" | \"submit\" | \"reset\" | undefined;\n    label: string;\n    onClick?: () => void;\n    width?: string;\n    height?: string;\n}\n\nconst StyledButton = ({\n    type,\n    label,\n    onClick,\n    width,\n    height,\n}: StyledButtonProps) => {\n    return (\n        <StyledBtn width={width} height={height} type={type} onClick={onClick}>\n            {label}\n        </StyledBtn>\n    );\n};\n\nexport default StyledButton;\n\ninterface BtnProps {\n    width?: string;\n    height?: string;\n}\nconst StyledBtn = styled.button<BtnProps>`\n    all: unset;\n    align-self: flex-end;\n    text-align: center;\n\n    width: ${({ width }) => (width ? `${width}px` : `120px`)};\n    height: ${({ height }) => (height ? `${height}px` : `46px`)};\n    border-radius: ${({ theme }) => theme.border_intensity};\n\n    background-color: ${({ theme }) => theme.colors.background};\n    transition: background-color 0.3s, color 0.3s;\n\n    cursor: pointer;\n    &:hover {\n        color: white;\n        background-color: ${({ theme }) => theme.colors.emph};\n    }\n`;\n","import { baseUrl } from \"api/url\";\nimport axios from \"axios\";\nimport { useMutation } from \"react-query\";\nimport { useHistory } from \"react-router\";\nimport { useRecoilState } from \"recoil\";\nimport { suggestionState } from \"store/suggestion\";\n\nconst useSuggestion = () => {\n    const [suggestion, setSuggestion] = useRecoilState(suggestionState);\n    const history = useHistory();\n\n    const refresh = () => {\n        setSuggestion({\n            title: \"\",\n            content: \"\",\n        });\n        history.push(\"/suggestion\");\n    };\n    const createSuggestion = useMutation(\n        () => {\n            return axios.post(`${baseUrl}/api/suggestions`, {\n                content: suggestion.content,\n                title: suggestion.title,\n            });\n        },\n        { onSuccess: () => refresh() }\n    );\n\n    return { createSuggestion: createSuggestion.mutate };\n};\n\nexport default useSuggestion;\n","import styled from \"styled-components\";\nimport { useRecoilState } from \"recoil\";\nimport _ from \"lodash\";\n\nimport { suggestionState } from \"store/suggestion\";\nimport TextAreaWithLabel from \"components/TextAreaWithLabel\";\nimport TextInputWithLabel from \"components/TextInputWithLabel\";\nimport StyledButton from \"components/StyledButton\";\nimport useSuggestion from \"hook/useSuggestion\";\n\nconst SuggestionPresenter = () => {\n    const [suggestion, setSuggestion] = useRecoilState(suggestionState);\n    const { createSuggestion } = useSuggestion();\n\n    const handleDebounceChange = _.debounce(\n        (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n            setSuggestion({ ...suggestion, [e.target.name]: e.target.value });\n        },\n        300\n    );\n\n    return (\n        <Wrapper>\n            <Box>\n                <Heading>서비스 이용에 불편한 점을 말해주세요</Heading>\n                <Notify>\n                    작성된 모든 사항은 <strong>익명</strong>이며, 관리자만 확인할 수 있습니다.\n                </Notify>\n                <InputWrapper>\n                    <TextInputWithLabel\n                        name=\"title\"\n                        placeholder=\"제목\"\n                        onChange={handleDebounceChange}\n                    />\n                    <TextAreaWithLabel\n                        name=\"content\"\n                        placeholder=\"내용\"\n                        onChange={handleDebounceChange}\n                    />\n                    <StyledButton\n                        type=\"submit\"\n                        label=\"보내기\"\n                        onClick={createSuggestion}\n                    />\n                </InputWrapper>\n            </Box>\n        </Wrapper>\n    );\n};\n\nexport default SuggestionPresenter;\n\nconst Wrapper = styled.main`\n    width: 100vw;\n    height: 80vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst Box = styled.section`\n    width: 520px;\n    height: auto;\n    padding: 24px 18px;\n    background-color: white;\n\n    display: flex;\n    flex-direction: column;\n`;\n\nconst Heading = styled.h1`\n    font-size: 18px;\n    font-weight: 500;\n`;\n\nconst Notify = styled.span`\n    font-size: 12px;\n    font-weight: 300;\n`;\n\nconst InputWrapper = styled.section`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    margin-top: 12px;\n`;\n","import SuggestionPresenter from \"../presenter/SuggestionPresenter\";\n\nconst SuggestionContainer = () => {\n    return <SuggestionPresenter />;\n};\n\nexport default SuggestionContainer;\n","import styled from \"styled-components\";\n\nconst Introduce = () => {\n    const introduction = (\n        <StyledSection>\n            <StyledH2>안녕하세요 여러분 !</StyledH2>\n            <StyledP>\n                자랑스러운 소프트웨어공학부 졸업생 – 재학생 동문 커뮤니티\n                <Strong> 스쿠드인</Strong> 입니다.\n                <br />\n                다들 잘 지내시는지, 어떤 일로 하루를 보내고 계신지 궁금한 것이\n                많은데\n                <br />\n                연락하기가 왜이리 어려워지는지 모르겠습니다.\n                <br />\n                저희는 여러분이 머물러 간 흔적 속에서, 익숙했던 얼굴들을\n                이따금씩 그리워하며. 졸업을 향하고 있습니다.\n                <br />\n                여러분이 있을 때에는 고민이 생기면 느티아래에서, 정보과학관에서,\n                마주치는 선배들을 붙잡고\n                <br />참 재미난 얘기를 많이 했던 것 같은데 이제는 그러지 못해\n                너무 아쉽습니다.\n            </StyledP>\n        </StyledSection>\n    );\n\n    const body = (\n        <StyledSection>\n            <StyledP>\n                저희 스쿠드인은 <Strong>졸업생, 재학생 간 소통</Strong>을 할 수\n                있는 창구를 만들어\n                <br />\n                위와 같은 아쉬움을 조금이나마 해소하고자 만든 사이트 입니다.\n                <br />\n                서비스를 사용하시면서 여러분이 얻을 수 있는 이점과 기대하는 점을\n                <br />\n                졸업생 / 재학생 별로 나누어 보았습니다.\n                <br />\n                잠시나마 머물면서 즐거우셨으면 좋겠습니다.\n            </StyledP>\n        </StyledSection>\n    );\n\n    const forGraduate = (\n        <StyledSection>\n            <StyledH2>졸업생분들께</StyledH2>\n            <StyledP>\n                대다수의 선배님들이 힘든 시기를 보내고, 취업을 하셨을 것으로\n                예상이 됩니다.\n                <br />\n                <Italic>\n                    회사 생활은 끝나지 않는 조별과제처럼 힘들다 던데..\n                    (존경스럽습니다.)\n                </Italic>\n                <br />\n                본론으로 들어가, 많은 후배들이 진로나 미래에 대한 고민이\n                많습니다.\n                <br />\n                선배님들이 지나오신 길을 후배들과 공유해주시면 어떨까요?\n                <br />\n                짧은 한 마디라도 후배들이 나아갈 방향이 될 수도, 무거운 마음이\n                조금이나마 덜어질 수도 있습니다. <br />\n                ‘라떼는 ~ 도 괜찮습니다. ^^‘ ‘자랑도 OK!! ‘ 힘들게 일궈낸 지난\n                날에 대해서 얘기해주세요! <br />\n                지친 회사 생활 속에서 잠시나마 지난 학교 생활을 추억할 수 있는\n                시간을 보내시길 기대합니다. 감사합니다.\n            </StyledP>\n        </StyledSection>\n    );\n\n    const forStudent = (\n        <StyledSection>\n            <StyledH2>재학생분들께</StyledH2>\n            <StyledP>\n                \"직업을 갖기 위해 해야할 준비는 무엇인가? , 선택할 때 어떤\n                가치를 더 중요시 할 것인가.\"\n                <br />\n                고학년이 되어 한번쯤은 고민했을 주제입니다. 정답이 없는\n                고민이라, 쉽게 결론내지 못하고 답답하고 힘드시죠? <br />\n                이런 고민들을 먼저 했던 선배들에게 물어보세요. <br />\n                정답을 알려고 하지 말고, 이런 방법도 있구나 ~ 참고 목적으로\n                질의를 해주시면 좋을 것 같습니다. <br />\n                모두가 힘든 시기가 찾아옵니다. 이 위기를 타파해서 무용담을 들려\n                줄 수 있는 졸업생으로 성장하길 기대합니다.\n            </StyledP>\n        </StyledSection>\n    );\n\n    const forAll = (\n        <StyledSection>\n            <StyledH2>모두에게 바라는 점!</StyledH2>\n            <StyledP>\n                자발적인 참여가 운영에 큰 힘이 됩니다.\n                <br />\n                여러분 모두 건강하세요. 힘들면 쉬시고, 힘내서 다시 방문해주세요.\n                <br />\n                모두에게 편안한 공간이 되기 위해서, 배려하며 이용하길\n                기대합니다.\n            </StyledP>\n        </StyledSection>\n    );\n\n    return (\n        <>\n            {introduction}\n            {body}\n            {forGraduate}\n            {forStudent}\n            {forAll}\n        </>\n    );\n};\n\nexport default Introduce;\n\nconst StyledSection = styled.section`\n    margin-bottom: 24px;\n`;\n\nconst StyledH2 = styled.h2`\n    font-size: 18px;\n    margin-bottom: 4px;\n    color: ${({ theme }) => theme.colors.bold};\n`;\n\nconst StyledP = styled.p`\n    font-size: 14px;\n    white-space: pre-wrap;\n    opacity: 0.7;\n    line-height: 2.0;\n`;\n\nconst Italic = styled.i`\n    font-size: 12px;\n    margin: 0;\n`;\n\nconst Strong = styled.strong``;\n","import styled from \"styled-components\";\n\nconst HowTo = () => {\n    const forStudent = (\n        <StyledSection>\n            <StyledH2>재학생</StyledH2>\n            <StyledUl>\n                <li>Google 회원가입을 통해 유저로 가입하기</li>\n                <li>졸업생들에 이야기를 책장에서 살펴보세요.</li>\n                <li>\n                    궁금 한 것은 졸업생의 책장,질문 란에 질의를 통해 해소하세요.\n                </li>\n                <li>건강한 우정을 나누길 기대합니다.</li>\n            </StyledUl>\n        </StyledSection>\n    );\n\n    const forGraduate = (\n        <StyledSection>\n            <StyledH2>졸업생</StyledH2>\n            <StyledUl>\n                <li>Google 회원가입을 통해 유저로 가입하기</li>\n                <li>\n                    책장에 책으로 등록하기\n                    <br />\n                    <Italic>\n                        아래와 같은 3가지 주제로 나를 설명하는 과정이 필요합니다\n                    </Italic>\n                    <StyledOl>\n                        <li>자기소개</li>\n                        <li>학교 생활에 대해서</li>\n                        <li>졸업 후 현재</li>\n                    </StyledOl>\n                </li>\n                <li>질의 응답에 응하며 도와주는 기쁨을 느끼기 .. !! ^^</li>\n            </StyledUl>\n        </StyledSection>\n    );\n\n    return (\n        <>\n            <StyledSection>\n                <StyledH2>이용방법</StyledH2>\n                <StyledP>\n                    저희 사이트는 사람 도서관이라는 주제로 서비스를\n                    기획했습니다.\n                    <br />한 사람의 인생은 한 권의 책과 같다고 하죠? 저희도\n                    여러분 개인을 책으로 등록하고,\n                    <br />그 책에 챕터를 여러분의 경험으로 채우고자 합니다.\n                    책으로 등록된 여러분은 책장에 모이게 됩니다.\n                    <br />\n                    자발적인 참여가 운영에 큰 힘이 됩니다!\n                </StyledP>\n            </StyledSection>\n\n            {forStudent}\n            {forGraduate}\n        </>\n    );\n};\n\nexport default HowTo;\n\nconst StyledSection = styled.section`\n    margin-bottom: 24px;\n`;\n\nconst StyledH2 = styled.h2`\n    font-size: 18px;\n    margin-bottom: 4px;\n    color: ${({ theme }) => theme.colors.bold};\n`;\n\nconst StyledP = styled.p`\n    font-size: 14px;\n    white-space: pre-wrap;\n    opacity: 0.7;\n    line-height: 2;\n`;\n\nconst Italic = styled.i`\n    font-size: 12px;\n    margin: 0;\n`;\n\nconst StyledUl = styled.ul`\n    list-style: inside square;\n    margin-left: 0px;\n\n    & > li {\n        font-size: 14px;\n        white-space: pre-wrap;\n        opacity: 0.7;\n        line-height: 2;\n    }\n`;\n\nconst StyledOl = styled.ol`\n    list-style: inside decimal;\n    margin-left: 30px;\n`;\n","import React, { useState } from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport Introduce from \"components/Introduce/Introduce\";\nimport HowTo from \"components/Introduce/HowTo\";\nimport styled from \"styled-components\";\n\nconst IntroducePresenter = () => {\n    const [category, setCategory] = useState<\"introduce\" | \"howto\">(\n        \"introduce\"\n    );\n\n    const onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        const { name } = e.target as HTMLButtonElement;\n        if (name === \"introduce\" || name === \"howto\") setCategory(name);\n    };\n\n    return (\n        <Wrapper>\n            <ContentWrapper>\n                <ButtonWrapper>\n                    <StyledBtn onClick={onClick} name=\"introduce\">\n                        소개\n                    </StyledBtn>\n                    <StyledBtn onClick={onClick} name=\"howto\">\n                        사용방법\n                    </StyledBtn>\n                </ButtonWrapper>\n\n                <TransitionGroup>\n                    <CSSTransition\n                        key={category}\n                        classNames=\"slide\"\n                        timeout={1000}\n                    >\n                        <div style={{ width: \"768px\" }}>\n                            {category === \"introduce\" ? (\n                                <Introduce />\n                            ) : (\n                                <HowTo />\n                            )}\n                        </div>\n                    </CSSTransition>\n                </TransitionGroup>\n            </ContentWrapper>\n        </Wrapper>\n    );\n};\n\nexport default IntroducePresenter;\n\nconst Wrapper = styled.div`\n    width: 100vw;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nconst ContentWrapper = styled.main`\n    width: 768px;\n    height: auto;\n`;\n\nconst ButtonWrapper = styled.section`\n    width: auto;\n    height: auto;\n    display: flex;\n    justify-content: flex-end;\n    gap: 6px;\n    margin-bottom: 12px;\n`;\n\nconst StyledBtn = styled.button`\n    all: unset;\n    padding: 6px 8px;\n    background-color: white;\n    cursor: pointer;\n    border-radius: 12px;\n\n    transition: color 0.3s, background-color 0.3s;\n    &:hover {\n        color: white;\n        background-color: ${({ theme }) => theme.colors.emph};\n    }\n`;\n","import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-regular-svg-icons\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { baseUrl } from \"api/url\";\n\ninterface IPeopleProfile {\n    blogId: number;\n    name: string;\n    entranceYear: string;\n    profileImageUrl: string;\n    content: string;\n}\n\nconst PeopleProfile = ({\n    blogId,\n    name,\n    entranceYear,\n    profileImageUrl,\n    content,\n}: IPeopleProfile) => {\n    const history = useHistory();\n\n    const onClick = () => {\n        history.push(`/library/${blogId}`);\n    };\n\n    return (\n        <div className=\"peoples__list__profile\" onClick={onClick}>\n            <div className=\"peoples__list__profile__logo\">\n                <div className=\"peoples__list__profile__logo__img\">\n                    <img\n                        src={`${baseUrl}/profile/${profileImageUrl}`}\n                        alt=\"test profile\"\n                    />\n                </div>\n\n                <div className=\"peoples__list__profile__logo__div\">\n                    <FontAwesomeIcon\n                        className=\"peoples__list__profile__logo__div__heart\"\n                        icon={faHeart}\n                        size=\"1x\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"peoples__list__profile__info\">\n                <p className=\"peoples__list__profile__info__name\">{name}</p>\n                <p className=\"peoples__list__profile__info__major\">\n                    소프트웨어 공학과, {entranceYear.slice(0, 4)} 입학\n                </p>\n                <p>{content}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default PeopleProfile;\n","import { baseUrl } from \"api/url\";\n\nexport const GET_BLOGS_URL: string = `${baseUrl}/api/blogs`;\n\ninterface IGET_BLOGS_BY_CATEGORY {\n    page?: number;\n    size?: number;\n    sort: string;\n}\nexport const GET_BLOGS_BY_CATEGORY_URL = ({\n    page = 0,\n    size = 10,\n    sort = \"\",\n}: IGET_BLOGS_BY_CATEGORY): string => {\n    let requestUrl: string = `${baseUrl}/api/blogs?page=${page}&size=${size}`;\n    if (sort === \"popular\") requestUrl += `&cmd=view`;\n    else requestUrl += `&sort=${sort}`;\n    return requestUrl;\n};\n","import axios from \"axios\";\nimport { GET_BLOGS_BY_CATEGORY_URL, GET_BLOGS_URL } from \"api/blog/url\";\nimport { IFetchBlog } from \"types/fetch\";\n\nexport async function getBlogs() {\n    const response = await axios.get<IFetchBlog>(GET_BLOGS_URL);\n    console.log(response.data.data);\n    return response.data.data;\n}\n\nexport const getBlogsByCategory = async (category: string) => {\n    const response = await axios.get<IFetchBlog>(\n        GET_BLOGS_BY_CATEGORY_URL({ sort: category })\n    );\n    console.log(response.data.data);\n    return response.data.data;\n};\n","import styled from \"styled-components\";\n\nimport { Link } from \"react-router-dom\";\n\nconst SuggestBlogCard = () => {\n    return (\n        <Box>\n            <Link to=\"/regist\">\n                책장에 등록하고, 좋은 정보를 나눠주세요 !<UnderSpan></UnderSpan>\n            </Link>\n        </Box>\n    );\n};\n\nexport default SuggestBlogCard;\n\nconst UnderSpan = styled.span`\n    width: 100%;\n    height: 2px;\n    background-color: ${({ theme }) => theme.colors.bold};\n    margin-top: 2px;\n\n    transform: scaleX(0);\n    transform-origin: left;\n    transition: transform 0.3s;\n`;\n\nconst Box = styled.div`\n    width: 100%;\n    height: 30px;\n    margin-bottom: 8px;\n\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n\n    & > a {\n        all: unset;\n        display: flex;\n        flex-direction: column;\n        font-size: 14px;\n        cursor: pointer;\n        font-weight: 400;\n        transition: color 0.3s;\n\n        &:hover {\n            color: ${({ theme }) => theme.colors.bold};\n        }\n\n        &:hover > ${UnderSpan} {\n            transform: scaleX(1);\n        }\n    }\n`;\n","import React, { useState } from \"react\";\nimport { useQueryClient } from \"react-query\";\n\nimport { IBlog } from \"types\";\nimport PeopleProfile from \"components/Library/PeopleProfile\";\nimport { useMutation } from \"react-query\";\nimport { getBlogsByCategory } from \"api/blog/fetch\";\nimport { useRecoilValue } from \"recoil\";\nimport { currentUserState } from \"store/user\";\nimport SuggestBlogCard from \"./SuggestBlogCard\";\n\ninterface IList {\n    blogs: IBlog[];\n}\n\nconst List = ({ blogs }: IList) => {\n    const categories: string[] = [\n        \"최신업데이트순\",\n        \"입학순\",\n        \"졸업순\",\n        \"인기순\",\n    ];\n\n    const [category, setCategory] = useState<string>(categories[0]);\n    const currentUser = useRecoilValue(currentUserState);\n\n    const queryClient = useQueryClient();\n\n    const changeCategory = useMutation(\n        (value: string) => getBlogsByCategory(value),\n        {\n            onSuccess: (data) => {\n                queryClient.setQueryData(\"blogs\", data);\n            },\n        }\n    );\n\n    const CanMakeBlog = () => {\n        if (!currentUser.data) return false;\n\n        if (currentUser.data?.graduationYear !== \"0\") {\n            if (!currentUser.data?.isBlog) return true;\n        }\n\n        return false;\n    };\n\n    const reducingCategory = (tempCategory: string): string => {\n        switch (tempCategory) {\n            case \"최신업데이트순\":\n                return \"user.lastModifiedDate,ASC\";\n            case \"입학순\":\n                return \"user.entranceYear,ASC\";\n            case \"졸업순\":\n                return \"user.graduationYear,ASC\";\n            case \"인기순\":\n                return \"popular\";\n            default:\n                return \"\";\n        }\n    };\n\n    const onCategoryClick = (tempCategory: string) => {\n        setCategory(tempCategory);\n        const formatedCategory = reducingCategory(tempCategory);\n        changeCategory.mutate(formatedCategory);\n    };\n\n    return (\n        <div className=\"library__peoples\">\n            <div className=\"peoples__category\">\n                <span>{category}</span>\n\n                <div className=\"peoples__category--content\">\n                    {categories.map((tempCategory, index) => (\n                        <span\n                            key={index}\n                            onClick={() => {\n                                onCategoryClick(tempCategory);\n                            }}\n                        >\n                            {tempCategory}\n                        </span>\n                    ))}\n                </div>\n            </div>\n\n            <div className=\"peoples__list\">\n                {CanMakeBlog() ? <SuggestBlogCard /> : null}\n                {blogs.map((blog, index) => (\n                    <PeopleProfile\n                        key={index}\n                        blogId={blog.id}\n                        name={blog.user.name}\n                        entranceYear={blog.user.entranceYear}\n                        profileImageUrl={blog.profile.name}\n                        content={blog.content}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default List;\n","import React from \"react\";\n\nimport styled, { keyframes } from \"styled-components\";\n\ninterface LoadingProps {\n    width?: string;\n}\n\nconst Loading = ({ width }: LoadingProps) => {\n    return (\n        <LoadingDiv width={width}>\n            <LoadingCircle></LoadingCircle>\n        </LoadingDiv>\n    );\n};\n\nexport default Loading;\n\nconst LoadingDiv = styled.div<{ width?: string }>`\n    width: ${({ width }) => (width ? width : \"100vw\")};\n    height: 100vh;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst LoadingAnimation = keyframes`\n    to {\n        transform: rotate(360deg);        \n    }\n`;\n\nconst LoadingCircle = styled.div`\n    width: 300px;\n    height: 300px;\n\n    border-radius: 50%;\n    border: solid 12px;\n    border-color: ${({ theme }) => theme.colors.emph} rgba(255, 255, 255, 0.2)\n        rgba(255, 255, 255, 0.2) rgba(255, 255, 255, 0.2);\n\n    animation: ${LoadingAnimation} 2s infinite ease-in;\n`;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nconst Error = () => {\n    return <ErrorDiv>im error</ErrorDiv>;\n};\n\nexport default Error;\n\nconst ErrorDiv = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background-color: red;\n`;\n","import List from \"components/Library/List\";\n// import Recommend from \"components/Library/Recommend\";\nimport Loading from \"components/Loading/Loading\";\nimport Error from \"components/Error/Error\";\nimport { IBlog } from \"types\";\n\nimport \"pages/library/Library.scss\";\n\ninterface ILibraryPresenter {\n    isLoading: boolean;\n    error: any;\n    blogs: IBlog[];\n}\n\nconst LibraryPresenter = ({ blogs, isLoading, error }: ILibraryPresenter) => {\n    if (isLoading) return <Loading />;\n    if (error || !blogs) return <Error />;\n\n    return (\n        <div className=\"library\">\n            {/* <Category /> */}\n            <List blogs={blogs} />\n            {/* <Recommend /> */}\n        </div>\n    );\n};\n\nexport default LibraryPresenter;\n","import { useQuery } from \"react-query\";\n\nimport LibraryPresenter from \"pages/library/presenter/LibraryPresenter\";\nimport Loading from \"components/Loading/Loading\";\nimport { getBlogsByCategory } from \"api/blog/fetch\";\n\nconst LibraryContainer = () => {\n    const { data, isLoading, error } = useQuery(\"blogs\", () =>\n        getBlogsByCategory(\"user.lastModifiedDate,ASC\")\n    );\n\n    if (!data) return <Loading />;\n    return (\n        <LibraryPresenter\n            blogs={data.content}\n            isLoading={isLoading}\n            error={error}\n        />\n    );\n};\n\nexport default LibraryContainer;\n","import { baseUrl } from \"api/url\";\n\nexport const GET_BLOGS_BY_ID_URL = (id: string) => `${baseUrl}/api/blogs/${id}`;\n\nexport const GET_QUESTION_BY_USERID_URL = (id: string) =>\n    `${baseUrl}/api/users/${id}/questions?page=0&size=10&sort=createdDate%2CDESC`;\n","import axios from \"axios\";\n\nimport { IGetBlogById, IGetQuestionsByUserId } from \"types/fetch\";\nimport { GET_BLOGS_BY_ID_URL, GET_QUESTION_BY_USERID_URL } from \"api/book/url\";\n\nexport const getBlogsById = async (id: string) => {\n    const response = await axios.get<IGetBlogById>(GET_BLOGS_BY_ID_URL(id));\n    return response.data.data;\n};\n\nexport const getQuestionsById = async (id: string) => {\n    const response = await axios.get<IGetQuestionsByUserId>(\n        GET_QUESTION_BY_USERID_URL(id)\n    );\n    return response.data.data;\n};\n","import React from \"react\";\n\ninterface IBookProfileInfoSummaryElement {\n    category: string;\n    element: string;\n}\n\nconst BookProfileInfoSummaryElement = ({\n    category,\n    element,\n}: IBookProfileInfoSummaryElement) => {\n    return (\n        <div\n            className=\"book__profile__info__summary__element\n    \"\n        >\n            <span className=\"book__profile__info__summary__element__title\">\n                {category}\n            </span>\n            <span className=\"book__profile__info__summary__element__body\">\n                {element}\n            </span>\n        </div>\n    );\n};\n\nexport default BookProfileInfoSummaryElement;\n","import React from \"react\";\n\nimport BookProfileInfoSummaryElement from \"./BookProfileInfoSummaryElement\";\n\ninterface IBookProfileInfoSummary {\n    name: string;\n    email: string;\n    entranceYear: string;\n    graduationYear?: string;\n}\n\nconst BookProfileInfoSummary = ({\n    name,\n    email,\n    entranceYear,\n    graduationYear,\n}: IBookProfileInfoSummary) => {\n    const categoryElement = [\n        [\"이름\", name],\n        [\"Email\", email],\n        [\"입학 년도\", entranceYear.slice(0, 4)],\n        graduationYear\n            ? graduationYear !== \"0\"\n                ? [\"졸업 년도\", graduationYear.slice(0, 4)]\n                : [\"\", \"\"]\n            : [\"\", \"\"],\n    ];\n\n    return (\n        <div className=\"book__profile__info__summary\">\n            {categoryElement.map((element, index) => (\n                <BookProfileInfoSummaryElement\n                    key={index}\n                    category={element[0]}\n                    element={element[1]}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default BookProfileInfoSummary;\n","import { faHeart } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { IUser } from \"types\";\nimport { baseUrl } from \"api/url\";\nimport BookProfileInfoSummary from \"./BookProfileInfoSummary\";\n\ninterface IBookProfile {\n    user: IUser;\n    blogImage: string;\n}\n\nconst BookProfile = ({ user, blogImage }: IBookProfile) => {\n    return (\n        <div className=\"book__profile__info\">\n            <div className=\"book__profile__info__vertical\">\n                <div className=\"book__profile__info__vertical__image\">\n                    <img\n                        src={`${baseUrl}/profile/${blogImage}`}\n                        // src={blogImage}\n                        alt=\"book profile img\"\n                    />\n                </div>\n                <div className=\"book__profile__info__vertical__follow\">\n                    <div className=\"book__profile__info__vertical__follow__heart\">\n                        <FontAwesomeIcon icon={faHeart} size=\"1x\" />\n                    </div>\n\n                    <button>인터뷰 요청하기</button>\n                </div>\n            </div>\n\n            <BookProfileInfoSummary\n                name={user.name}\n                email={user.email}\n                entranceYear={user.entranceYear}\n                graduationYear={user.graduationYear}\n            />\n        </div>\n    );\n};\n\nexport default BookProfile;\n","interface ConvertDateReturnType {\n    year: string;\n    month: string;\n    day: string;\n    hour: string;\n    minute: string;\n    second: string;\n}\n\nconst convertDate = (date: string): ConvertDateReturnType => {\n    // 2021-05-22T00:26:12.843439\n    const year = date.slice(0, 4);\n    const month = date.slice(5, 7);\n    const day = date.slice(8, 10);\n    const hour = date.slice(11, 13);\n    const minute = date.slice(14, 16);\n    const second = date.slice(17, 19);\n\n    return { year, month, day, hour, minute, second };\n};\n\nexport default convertDate;\n","import { useHistory } from \"react-router-dom\";\n\nimport ReactMarkdown from \"react-markdown\";\nimport convertDate from \"utils/convertDate\";\n\ninterface IBookProfilePostDetail {\n    index: number;\n    id: number;\n    title: string;\n    content: string;\n    createdDate: string;\n    view: number;\n}\n\nconst BookProfilePostDetail = ({\n    id,\n    index,\n    title,\n    content,\n    createdDate,\n    view,\n}: IBookProfilePostDetail) => {\n    const history = useHistory();\n    const onPostClick = () => {\n        history.push(`/post/${id}`);\n    };\n\n    const setDateFormat = (date: string) => {\n        const { year, month, day } = convertDate(date);\n        return `${year}년 ${month}월 ${day}일`;\n    };\n\n    const setContentFormat = (ogContent: string) => {\n        // const fmContent: string = ogContent.split(\"\\n\").slice(0, 2).join(\"\\n\");\n        const fmContent: string = ogContent.slice(0, 40);\n\n        const plusContent: string = \"...\";\n        return fmContent + plusContent;\n    };\n\n    return (\n        <div className=\"book__profile__question__summary\" onClick={onPostClick}>\n            <div className=\"book__profile__question__summary__question\">\n                <span className=\"book__profile__question__summary__question--title\">\n                    {title}\n                </span>\n                <span>{setDateFormat(createdDate)} 올린 글</span>\n            </div>\n\n            <div className=\"book__profile__question__summary__answer mde-preview\">\n                <div className=\"mde-preview-content\">\n                    <ReactMarkdown>{setContentFormat(content)}</ReactMarkdown>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default BookProfilePostDetail;\n","import { Link } from \"react-router-dom\";\n\nimport BookProfilePostDetail from \"./BookProfilePostDetail\";\nimport { IPost, IUser } from \"types\";\nimport { useRecoilValue } from \"recoil\";\nimport { currentUserState } from \"store/user\";\n\ninterface IBookProfilePosts {\n    posts: IPost[];\n    user: IUser;\n}\n\nconst BookProfilePosts = ({ posts, user }: IBookProfilePosts) => {\n    const currentUser = useRecoilValue(currentUserState);\n\n    return (\n        <div className=\"book__profile__question\">\n            {currentUser.data?.id === user.id ? (\n                <Link to=\"/write\">\n                    <div className=\"book__profile__question__write\">\n                        <span>새로운 글 작성하기</span>\n                    </div>\n                </Link>\n            ) : null}\n\n            {posts.map((post, index) => {\n                const { id, title, content, createdDate, view } = post;\n                return (\n                    <BookProfilePostDetail\n                        key={index}\n                        id={id}\n                        index={index}\n                        title={title}\n                        content={content}\n                        createdDate={createdDate}\n                        view={view}\n                    />\n                );\n            })}\n\n            {/* <ModalPortal>\n                {openModalIndex !== null ? (\n                    <PostModal\n                        setOpenModalIndex={setOpenModalIndex}\n                        title={posts[openModalIndex].title}\n                        content={posts[openModalIndex].content}\n                        created={posts[openModalIndex].created}\n                        view={posts[openModalIndex].view}\n                    />\n                ) : null}\n            </ModalPortal> */}\n        </div>\n    );\n};\n\nexport default BookProfilePosts;\n","const EmptyBookProfilePosts = () => {\n    return <div className=\"book__profile__question\">비어 있어용</div>;\n};\n\nexport default EmptyBookProfilePosts;\n","import { IComment } from \"types\";\nimport convertDate from \"utils/convertDate\";\n\ninterface IQuestionDetail {\n    id: number;\n    index: number;\n    createdDate: string;\n    title: string;\n    content: string;\n    comments: IComment[];\n    setOpenQuesIndex: React.Dispatch<React.SetStateAction<number | null>>;\n}\n\nconst QuestionDetail = ({\n    id,\n    index,\n    createdDate,\n    title,\n    content,\n    setOpenQuesIndex,\n}: IQuestionDetail) => {\n    const { year, month, day } = convertDate(createdDate);\n\n    const onQuesClick = () => {\n        setOpenQuesIndex(index);\n    };\n\n    return (\n        <div className=\"book__right__question__detail\" onClick={onQuesClick}>\n            <div className=\"book__right__question__detail__month\">\n                <p>{year}</p>\n                <p>{`${month}${day}`}</p>\n            </div>\n            <div className=\"book__right__question__detail__icon\">\n                <div className=\"book__right__question__detail__icon__circle\"></div>\n                <div className=\"book__right__question__detail__icon__line\"></div>\n            </div>\n            <div className=\"book__right__question__detail__summary\">\n                <p className=\"book__right__question__detail__summary__title\">\n                    {title}\n                </p>\n                <p className=\"book__right__question__detail__summary__content\">\n                    {content}\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default QuestionDetail;\n","import ReactDOM from \"react-dom\";\n\ninterface IModalPortal {\n    children: JSX.Element | null;\n}\n\nconst ModalPortal = ({ children }: IModalPortal) => {\n    const el = document.getElementById(\"modal\");\n    if (el && children) return ReactDOM.createPortal(children, el);\n    return null;\n};\n\nexport default ModalPortal;\n","import { atom } from \"recoil\";\n\nexport const questionCommentContentState = atom<string>({\n    key: \"questionCommentContentState\",\n    default: \"\",\n});\n","import axios from \"axios\";\nimport { useQuery, useMutation, useQueryClient } from \"react-query\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport { baseUrl } from \"api/url\";\nimport { currentUserState } from \"store/user\";\nimport { questionCommentContentState } from \"store/question/comment\";\nimport { IGetCommentsByQuestionId } from \"types/fetch\";\n\ninterface PropTypes {\n    questionId: number;\n}\n\nconst useQuestionComment = ({ questionId }: PropTypes) => {\n    const currentUser = useRecoilValue(currentUserState);\n    const [questionCommentContent, setQuestionCommentContent] = useRecoilState(\n        questionCommentContentState\n    );\n    const queryClient = useQueryClient();\n\n    const { data } = useQuery([\"QuestionComments\", questionId], () =>\n        axios.get<IGetCommentsByQuestionId>(\n            `${baseUrl}/api/questions/${questionId}/comments`\n        )\n    );\n\n    const refresh = () => {\n        queryClient.invalidateQueries([\"QuestionComments\", questionId]);\n    };\n\n    const createComment = useMutation(\n        (questionId: number) => {\n            console.log(\"post comment\");\n\n            return axios.post(`${baseUrl}/api/comments`, {\n                content: questionCommentContent,\n                questionId,\n                writerUserId: currentUser.data?.id,\n            });\n        },\n        {\n            onSuccess: () => {\n                setQuestionCommentContent(\"\");\n                refresh();\n            },\n        }\n    );\n\n    // > 그 다음 뮤테이션으로 새로운 댓글 추가 만든 후 리프레시\n    // > 그 다음 뮤테이션으로 삭제, 수정\n    return {\n        data: data ? data.data.data : [],\n        createComment: createComment.mutate,\n    };\n};\n\nexport default useQuestionComment;\n","import styled from \"styled-components\";\n\nconst EmptyQuestionModalComments = () => {\n    return (\n        <EmptyComments>\n            <span>\n                아직 댓글이 없습니다 <strong>:C</strong>\n            </span>\n        </EmptyComments>\n    );\n};\n\nexport default EmptyQuestionModalComments;\n\nconst EmptyComments = styled.div`\n    width: 100%;\n    height: 45%;\n    padding: 12px;\n    background-color: ${({ theme }) => theme.colors.background};\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n","import styled from \"styled-components\";\n\nimport { IComment } from \"types\";\nimport convertDate from \"utils/convertDate\";\nimport EmptyQuestionModalComments from \"./EmptyQuestionModalComments\";\n\ninterface PropTypes {\n    comments: IComment[];\n}\n\nconst QuestionModalComments = ({ comments }: PropTypes) => {\n    if (comments.length === 0) return <EmptyQuestionModalComments />;\n\n    return (\n        <ModalComments>\n            {comments.map((comment, index) => {\n                const { year, month, day, hour, minute } = convertDate(\n                    comment.createdDate\n                );\n\n                return (\n                    <Comment key={index}>\n                        <CommentHeader>\n                            <CommentHeaderImage>\n                                <img\n                                    src={comment.writerUser.userImageUrl}\n                                    alt={comment.writerUser.name}\n                                />\n                            </CommentHeaderImage>\n                            <h3>{comment.writerUser.name}</h3>\n                            <CommentDate>{`${year}년 ${month}월 ${day}일 ${hour}시 ${minute}분`}</CommentDate>\n                        </CommentHeader>\n\n                        <CommentContent>{comment.content}</CommentContent>\n                    </Comment>\n                );\n            })}\n        </ModalComments>\n    );\n};\n\nexport default QuestionModalComments;\n\nconst ModalComments = styled.div`\n    width: 100%;\n    height: 45%;\n    padding: 12px;\n    background-color: ${({ theme }) => theme.colors.background};\n\n    overflow: scroll;\n`;\n\nconst Comment = styled.div`\n    width: 100%;\n    height: auto;\n\n    display: flex;\n    flex-direction: column;\n\n    margin-bottom: 24px;\n    padding-bottom: 8px;\n    border-bottom: 2px solid rgba();\n`;\n\nconst CommentHeader = styled.div`\n    width: 100%;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    & > h3 {\n        font-size: 16px;\n    }\n`;\n\nconst CommentHeaderImage = styled.div`\n    position: relative;\n    width: 30px;\n    height: 30px;\n    border-radius: 50%;\n    background-color: white;\n    overflow: hidden;\n    & > img {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n    }\n`;\n\nconst CommentContent = styled.p`\n    font-size: 14px;\n`;\n\nconst CommentDate = styled.span`\n    font-size: 12px;\n    opacity: 0.5;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { CSSTransition } from \"react-transition-group\";\nimport _ from \"lodash\";\n\nimport useQuestionComment from \"hook/useQuestionComment\";\nimport TextInputWithLabel from \"components/TextInputWithLabel\";\nimport { questionCommentContentState } from \"store/question/comment\";\nimport QuestionModalComments from \"./Question/QuestionModalComments\";\nimport { IComment, IUser } from \"types\";\nimport { currentUserState } from \"store/user\";\n\ninterface IQuestionModal {\n    id: number;\n    title: string;\n    content: string;\n    createdDate: string;\n    comments: IComment[];\n    setOpenQuesIndex: React.Dispatch<React.SetStateAction<number | null>>;\n    targetUser: IUser;\n    writerUser: IUser;\n}\n\nconst QuestionModal = ({\n    setOpenQuesIndex,\n    id,\n    title,\n    content,\n    createdDate,\n    comments,\n    targetUser,\n    writerUser,\n}: IQuestionModal) => {\n    const MODAL_TRANSITION_DURATION = 500;\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const currentUser = useRecoilValue(currentUserState);\n    const setComment = useSetRecoilState(questionCommentContentState);\n\n    const { data, createComment } = useQuestionComment({ questionId: id });\n\n    useEffect(() => {\n        setIsOpen(true);\n    }, []);\n\n    const closeModal = (e: React.MouseEvent) => {\n        console.log(e.target);\n        console.log(e.currentTarget);\n\n        if (e.target !== e.currentTarget) return;\n\n        setIsOpen(false);\n        setTimeout(() => setOpenQuesIndex(null), MODAL_TRANSITION_DURATION);\n    };\n\n    const handleDebounceChange = _.debounce(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            setComment(e.target.value);\n        },\n        300\n    );\n\n    const handleSubmit = () => {\n        if (!currentUser.isSigned) {\n            alert(\"로그인 후 댓글 작성해주세요 !\");\n            return;\n        }\n\n        createComment(id);\n    };\n\n    return (\n        <CSSTransition\n            in={isOpen}\n            timeout={MODAL_TRANSITION_DURATION}\n            classNames=\"modal--transition\"\n        >\n            <div className=\"modal\" onClick={closeModal}>\n                <Modal className=\"modal__content\">\n                    <ModalHeader>\n                        <ModalHeaderLeft>\n                            <ModalTitle>{title}</ModalTitle>\n                            <ModalInfo>\n                                {writerUser.name}님이 {targetUser.name}에게 한\n                                질문\n                            </ModalInfo>\n                        </ModalHeaderLeft>\n                        <ModalCloseBtn onClick={closeModal}>X</ModalCloseBtn>\n                    </ModalHeader>\n                    <ModalContent>\n                        <p>{content}</p>\n                    </ModalContent>\n\n                    <QuestionModalComments comments={data} />\n\n                    <ModalWrite>\n                        <TextInputWithLabel\n                            name=\"comment\"\n                            placeholder=\"댓글\"\n                            onChange={handleDebounceChange}\n                        ></TextInputWithLabel>\n                        <button onClick={handleSubmit}>댓글 달기</button>\n                    </ModalWrite>\n                </Modal>\n            </div>\n        </CSSTransition>\n    );\n};\n\nexport default QuestionModal;\n\nconst Modal = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    overflow: scroll;\n`;\n\nconst ModalHeader = styled.div`\n    width: 100%;\n    height: 10%;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 6px;\n`;\n\nconst ModalHeaderLeft = styled.div`\n    display: flex;\n    align-items: flex-end;\n`;\n\nconst ModalTitle = styled.h1`\n    font-size: 24px;\n    margin-right: 6px;\n`;\n\nconst ModalInfo = styled.span`\n    font-size: 12px;\n    opacity: 0.5;\n`;\n\nconst ModalCloseBtn = styled.button`\n    all: unset;\n    width: 30px;\n    height: 30px;\n    text-align: center;\n    border-radius: 50%;\n    cursor: pointer;\n    font-weight: bold;\n    transition: background-color 0.3s;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.background};\n    }\n`;\n\nconst ModalContent = styled.div`\n    width: 100%;\n    height: 35%;\n\n    overflow: scroll;\n`;\n\nconst ModalWrite = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n\n    & > button {\n        all: unset;\n        width: 100px;\n        height: 50px;\n        text-align: center;\n        margin-left: 12px;\n\n        cursor: pointer;\n\n        transition: background-color 0.3s;\n        &:hover {\n            background-color: ${({ theme }) => theme.colors.background};\n        }\n    }\n`;\n","import { atom } from \"recoil\";\n\nexport const newQuestionState = atom<{ title: string; content: string }>({\n    key: \"newQuestionState\",\n    default: { title: \"\", content: \"\" },\n});\n\nexport const isNewQuestionModalOpenState = atom<boolean>({\n    key: \"isNewQuestionModalOpenState\",\n    default: false,\n});\n","import axios from \"axios\";\n\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { currentUserState } from \"store/user\";\nimport { isNewQuestionModalOpenState, newQuestionState } from \"store/question\";\nimport { baseUrl } from \"api/url\";\n\nconst useQuestion = () => {\n    const queryClient = useQueryClient();\n\n    const currentUser = useRecoilValue(currentUserState);\n    const newQuestion = useRecoilValue(newQuestionState);\n\n    const setIsnNewQuestionModalOpen = useSetRecoilState(\n        isNewQuestionModalOpenState\n    );\n\n    const refresh = () => {\n        queryClient.invalidateQueries([\"questions\"]);\n        setIsnNewQuestionModalOpen(false);\n    };\n\n    const saveQuestion = useMutation(\n        (targetId: number) => {\n            return axios.post(`${baseUrl}/api/questions`, {\n                fix: true,\n                status: true,\n                targetUserId: targetId,\n                writerUserId: currentUser.data?.id,\n                title: newQuestion.title,\n                content: newQuestion.content,\n            });\n        },\n        { onSuccess: () => refresh() }\n    );\n\n    return {\n        saveQuestion: saveQuestion.mutate,\n    };\n};\n\nexport default useQuestion;\n","import { baseUrl } from \"api/url\";\nimport axios from \"axios\";\n\nimport { IGetBlogByUserId } from \"types/fetch\";\n\nconst useBlogByUserId = () => {\n    const getBlogByUserId = async (userId: number | undefined) => {\n        const data = await axios.get<IGetBlogByUserId>(\n            `${baseUrl}/api/users/${userId}/blogs`\n        );\n\n        return data?.data.data;\n    };\n\n    return {\n        getBlogByUserId,\n    };\n};\n\nexport default useBlogByUserId;\n","import React, { useEffect, useState } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { useParams } from \"react-router-dom\";\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport _ from \"lodash\";\n\nimport useQuestion from \"hook/useQuestion\";\nimport { isNewQuestionModalOpenState, newQuestionState } from \"store/question\";\nimport TextInputWithLabel from \"components/TextInputWithLabel\";\nimport TextAreaWithLabel from \"components/TextAreaWithLabel\";\nimport StyledButton from \"components/StyledButton\";\nimport useBlogByUserId from \"hook/useBlogByUserId\";\nimport { IBlog } from \"types\";\n\ninterface Params {\n    id: string;\n}\n\nconst NewQuestion = () => {\n    const MODAL_TRANSITION_DURATION = 500;\n    const { id } = useParams<Params>();\n\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const [targetUser, setTargetUser] = useState<IBlog>();\n\n    const [newQuestion, setNewQuestion] = useRecoilState(newQuestionState);\n    const setIsNewQuestionModalOpen = useSetRecoilState(\n        isNewQuestionModalOpenState\n    );\n\n    const { saveQuestion } = useQuestion();\n    const { getBlogByUserId } = useBlogByUserId();\n\n    useEffect(() => {\n        const setTarget = async () => {\n            const target = await getBlogByUserId(parseInt(id));\n            setTargetUser(target);\n        };\n\n        setIsOpen(true);\n        setTarget();\n    }, [getBlogByUserId, id]);\n\n    const closeModal = (e: React.MouseEvent) => {\n        if (e.target !== e.currentTarget) return;\n\n        setIsOpen(false);\n        setTimeout(\n            () => setIsNewQuestionModalOpen(false),\n            MODAL_TRANSITION_DURATION\n        );\n    };\n\n    const handleDebounceChange = _.debounce(\n        (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n            setNewQuestion({ ...newQuestion, [e.target.name]: e.target.value });\n        },\n        300\n    );\n\n    const onSubmit = () => {\n        if (targetUser) saveQuestion(targetUser.id);\n        console.log(\"submit\");\n    };\n\n    return (\n        <CSSTransition\n            in={isOpen}\n            timeout={MODAL_TRANSITION_DURATION}\n            classNames=\"modal--transition\"\n        >\n            <div className=\"modal\" onClick={closeModal}>\n                <ModalBox className=\"modal__content\">\n                    <StyledH2>\n                        <strong>{targetUser?.user.name}</strong>님에게\n                        질문하기\n                    </StyledH2>\n                    <TextInputWithLabel\n                        name=\"title\"\n                        maxLength={15}\n                        placeholder=\"제목\"\n                        onChange={handleDebounceChange}\n                    ></TextInputWithLabel>\n                    <TextAreaWithLabel\n                        placeholder=\"내용\"\n                        name=\"content\"\n                        onChange={handleDebounceChange}\n                    ></TextAreaWithLabel>\n                    <StyledButton\n                        type=\"submit\"\n                        label=\"질문 완료\"\n                        onClick={onSubmit}\n                    />\n                </ModalBox>\n            </div>\n        </CSSTransition>\n    );\n};\n\nexport default NewQuestion;\n\nconst StyledH2 = styled.h2`\n    font-weight: 500;\n    font-size: 1.2rem;\n`;\n\nconst ModalBox = styled.div`\n    height: 400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    border-radius: ${({ theme }) => theme.border_intensity};\n`;\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport styled from \"styled-components\";\n\nimport NewQuestion from \"../Modal/NewQuestion\";\nimport ModalPortal from \"components/Modal/ModalPortal\";\nimport { isNewQuestionModalOpenState } from \"store/question\";\n\ninterface EmptyQuestionProps {\n    onClickNewQuestion: () => void;\n}\n\nconst EmptyQuestion = ({ onClickNewQuestion }: EmptyQuestionProps) => {\n    const isNewQuestionModalOpen = useRecoilValue(isNewQuestionModalOpenState);\n\n    return (\n        <React.Fragment>\n            <StyledDiv onClick={onClickNewQuestion}>\n                <span>\n                    첫 질문의 <strong>주인공</strong>이 되어 보세요 !\n                </span>\n            </StyledDiv>\n\n            <ModalPortal>\n                {isNewQuestionModalOpen ? <NewQuestion /> : null}\n            </ModalPortal>\n        </React.Fragment>\n    );\n};\n\nexport default EmptyQuestion;\n\nconst StyledDiv = styled.div`\n    position: sticky;\n    top: 80px;\n\n    width: 40%;\n    height: 110px;\n    background-color: ${({ theme }) => theme.colors.white};\n    border-radius: ${({ theme }) => theme.border_intensity};\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n\n    transition: all 0.3s;\n    &:hover {\n        color: ${({ theme }) => theme.colors.white};\n        background-color: ${({ theme }) => theme.colors.emph};\n    }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport QuestionDetail from \"./QuestionDetail\";\nimport ModalPortal from \"components/Modal/ModalPortal\";\nimport QuestionModal from \"components/Modal/QuestionModal\";\n\nimport { IQuestion } from \"types\";\nimport EmptyQuestion from \"./EmptyQuestion\";\nimport NewQuestion from \"../Modal/NewQuestion\";\nimport { currentUserState } from \"store/user\";\nimport { isNewQuestionModalOpenState } from \"store/question\";\n\ninterface IQuestions {\n    questions: IQuestion[];\n}\n\nconst Questions = ({ questions }: IQuestions) => {\n    const [openQuesIndex, setOpenQuesIndex] = useState<number | null>(null);\n    const [curQuestion, setCurQuestion] = useState<IQuestion | null>(null);\n\n    const [isNewQuestionModalOpen, setIsNewQuestionModalOpen] = useRecoilState(\n        isNewQuestionModalOpenState\n    );\n\n    const currentUser = useRecoilValue(currentUserState);\n\n    useEffect(() => {\n        if (openQuesIndex === null) {\n            setCurQuestion(null);\n            return;\n        }\n        setCurQuestion(questions[openQuesIndex]);\n    }, [openQuesIndex, questions]);\n\n    const onClickNewQuestion = () => {\n        if (currentUser.isSigned) {\n            setIsNewQuestionModalOpen(true);\n            return;\n        }\n        alert(\"로그인 후 댓글을 남겨주세요 !\");\n    };\n\n    if (questions.length === 0)\n        return <EmptyQuestion onClickNewQuestion={onClickNewQuestion} />;\n\n    return (\n        <React.Fragment>\n            <div className=\"book__right\">\n                <div className=\"book__right__question\">\n                    {questions.map((question, index) => (\n                        <QuestionDetail\n                            key={index}\n                            index={index}\n                            id={question.id}\n                            title={question.title}\n                            content={question.content}\n                            createdDate={question.createdDate}\n                            comments={question.comments}\n                            setOpenQuesIndex={setOpenQuesIndex}\n                        />\n                    ))}\n                </div>\n\n                <div className=\"book__right__new\" onClick={onClickNewQuestion}>\n                    <span>새로운 질문하기</span>\n                </div>\n            </div>\n\n            <ModalPortal>\n                {curQuestion !== null ? (\n                    <QuestionModal\n                        setOpenQuesIndex={setOpenQuesIndex}\n                        id={curQuestion.id}\n                        title={curQuestion.title}\n                        content={curQuestion.content}\n                        createdDate={curQuestion.createdDate}\n                        comments={curQuestion.comments}\n                        targetUser={curQuestion.targetUser}\n                        writerUser={curQuestion.writerUser}\n                    />\n                ) : isNewQuestionModalOpen ? (\n                    <NewQuestion />\n                ) : null}\n            </ModalPortal>\n        </React.Fragment>\n    );\n};\n\nexport default Questions;\n","import BookProfile from \"components/Book/BookProfile\";\nimport BookProfilePosts from \"components/Book/BookProfilePosts\";\nimport EmptyBookProfilePosts from \"components/Book/EmptyBookProfilePosts\";\nimport Questions from \"components/Book/Questions\";\n\nimport { IPost, IQuestion, IUser } from \"types\";\n\nimport \"pages/book/Book.scss\";\nimport Loading from \"components/Loading/Loading\";\nimport Error from \"components/Error/Error\";\n\ninterface IBookPresenter {\n    isLoading: boolean;\n    error: any;\n    posts: IPost[];\n    user: IUser;\n    blogImage: string;\n    questions: IQuestion[];\n}\n\n// 블로그 등록할 때, 사진이 제대로 안간다\n\nconst BookPresenter = ({\n    isLoading,\n    error,\n    posts,\n    user,\n    questions,\n    blogImage,\n}: IBookPresenter) => {\n    if (isLoading) return <Loading />;\n    if (error || !posts) return <Error />;\n\n    return (\n        <div className=\"book\">\n            <div className=\"book__profile\">\n                <BookProfile user={user} blogImage={blogImage} />\n                {posts ? (\n                    <BookProfilePosts posts={posts} user={user} />\n                ) : (\n                    <EmptyBookProfilePosts />\n                )}\n            </div>\n\n            <Questions questions={questions ? questions : []} />\n        </div>\n    );\n};\n\nexport default BookPresenter;\n","import styled, { keyframes } from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Notfound = () => {\n    const history = useHistory();\n\n    const onClick = () => {\n        history.push(\"/\");\n    };\n\n    return (\n        <StyledMain>\n            <StyledH1 onClick={onClick}>404 Not found</StyledH1>\n        </StyledMain>\n    );\n};\n\nexport default Notfound;\n\nconst StyledMain = styled.main`\n    width: 100vw;\n    height: 100vh;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst HeaderAnimation = keyframes`\n    0% {\n        width: 0;\n    }\n    60% {\n        width: 100%;\n    }\n    100%{\n        width: 0;\n    }\n`;\n\nconst StyledH1 = styled.h1`\n    position: relative;\n    font-size: 3rem;\n    -webkit-text-stroke: 2px ${({ theme }) => theme.colors.emph};\n    color: ${({ theme }) => theme.colors.background};\n    text-align: center;\n    cursor: pointer;\n    &::after {\n        position: absolute;\n        top: 0;\n        left: 0;\n        content: \"404 Not found\";\n\n        /* for animation */\n        margin: 0 auto;\n        text-align: center;\n        white-space: nowrap;\n\n        width: 100%;\n        height: 100%;\n        font-size: 3rem;\n        color: ${({ theme }) => theme.colors.emph};\n        -webkit-text-stroke: 0px ${({ theme }) => theme.colors.emph};\n        overflow: hidden;\n\n        animation: ${HeaderAnimation} infinite 6s ease-in-out;\n    }\n`;\n","import { useQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\n\nimport { getBlogsById, getQuestionsById } from \"api/book/fetch\";\nimport BookPresenter from \"pages/book/presenter/BookPresenter\";\nimport Loading from \"components/Loading/Loading\";\nimport Notfound from \"pages/notfound/Notfound\";\n\ninterface IParams {\n    id: string;\n}\n\nconst BookContainer = () => {\n    const { id } = useParams<IParams>();\n    const { data, isLoading, error } = useQuery(\"posts\", () =>\n        getBlogsById(id)\n    );\n\n    const {\n        data: quesData,\n        // isLoading: quesIsLoading,\n        // error: quesError,\n    } = useQuery(\"questions\", () => getQuestionsById(id));\n\n    if (error) return <Notfound />;\n    if (!data || !quesData) return <Loading />;\n\n    return (\n        <BookPresenter\n            isLoading={isLoading}\n            error={error}\n            posts={data.posts.content}\n            blogImage={data.profile.name}\n            user={data.user}\n            questions={quesData?.content}\n        />\n    );\n};\n\nexport default BookContainer;\n","export default __webpack_public_path__ + \"static/media/google.fd2c1f7a.png\";","import { baseUrl } from \"api/url\";\n\n// Social Login\nexport const LOGIN_GOOGLE_URL: string = `${baseUrl}/auth/google/callback`;\nexport const LOGIN_KAKAO_URL: string = `${baseUrl}/auth/kakao/callback`;\nexport const LOGIN_NAVER_URL: string = `${baseUrl}/auth/naver/callback`;\n\nexport const SETTING_USER_URL = (id: number) => `${baseUrl}/api/users/${id}`;\n","import axios from \"axios\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport {\n    LOGIN_GOOGLE_URL,\n    LOGIN_KAKAO_URL,\n    LOGIN_NAVER_URL,\n} from \"api/socialLogin/url\";\n\nimport { ISignin } from \"types/fetch\";\nimport { useSetRecoilState } from \"recoil\";\nimport { currentUserState } from \"store/user\";\nimport useUserSession from \"./useUserSession\";\n\ndeclare global {\n    interface Window {\n        Kakao: any;\n        naver: any;\n    }\n}\n\nconst useSocialLogin = () => {\n    const history = useHistory();\n    const location = useLocation();\n    const { setUserTokenAndId } = useUserSession();\n    const setCurrentUser = useSetRecoilState(currentUserState);\n\n    const PushPathWithUserData = async (\n        provider: string,\n        fetchURL: string,\n        accessToken: string\n    ) => {\n        const {\n            data: {\n                data: { firstVisit, token, user },\n            },\n        } = await axios.post<ISignin>(fetchURL, {\n            accessToken,\n        });\n\n        // 유저가 첫 방문, 즉 회원 가입을 해야할 시\n        if (firstVisit) {\n            setCurrentUser({\n                isSigned: false,\n                token: token,\n                data: {\n                    ...user,\n                },\n            });\n            history.push(\"/signin/setting\");\n            return;\n        }\n        // 회원 가입을 했던 유저일 시\n        // set token to axios defaults header\n        axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n        setCurrentUser({\n            isSigned: true,\n            token: token,\n            data: {\n                ...user,\n            },\n        });\n\n        setUserTokenAndId({\n            token: token,\n            id: user.id,\n        });\n\n        console.log(user.name + \"님 로그인 됐습니다\");\n        history.push(\"/\");\n    };\n\n    const OnGoogleLogin = async (result: any) => {\n        const {\n            tokenObj: { access_token },\n        } = result;\n\n        console.log(\"GOOGLE LOGIN SUCCESS\");\n        console.log(access_token);\n        PushPathWithUserData(\"google\", LOGIN_GOOGLE_URL, access_token);\n    };\n\n    const OnKakaoLogin = () => {\n        try {\n            window.Kakao.Auth.login({\n                success: (response: any) => {\n                    const { access_token } = response;\n                    console.log(\"KAKAO LOGIN SUCCESS\");\n                    console.log(access_token);\n                    PushPathWithUserData(\n                        \"kakao\",\n                        LOGIN_KAKAO_URL,\n                        access_token\n                    );\n                },\n                fail: (response: any) => {\n                    console.log(response);\n                },\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const initializeNaverLogin = () => {\n        const naverLogin = new window.naver.LoginWithNaverId({\n            clientId: process.env.REACT_APP_NAVER_CLIENT_ID,\n            callbackUrl: \"http://localhost:3000/signin/naver\",\n            isPopup: false,\n            loginButton: { color: \"green\", type: 1, height: \"110\" },\n        });\n        naverLogin.init();\n    };\n\n    const OnNaverLogin = async () => {\n        if (!location.hash) history.push(\"/sign\");\n        const accessToken = location.hash.split(\"=\")[1].split(\"&\")[0];\n        PushPathWithUserData(\"naver\", LOGIN_NAVER_URL, accessToken);\n    };\n\n    return {\n        OnGoogleLogin,\n        OnKakaoLogin,\n        initializeNaverLogin,\n        OnNaverLogin,\n    };\n};\n\nexport default useSocialLogin;\n","import { GoogleLogin } from \"react-google-login\";\n\nimport logoGoogle from \"static/images/google.png\";\n// import logoKakao from \"static/images/kakao.png\";\n\nimport \"pages/signIn/SignIn.scss\";\nimport useSocialLogin from \"hook/useSocialLogin\";\n\nconst SignInPresenter = () => {\n    // const { initializeNaverLogin, OnGoogleLogin, OnKakaoLogin } =\n    //     useSocialLogin();\n\n    // useEffect(() => {\n    // initializeNaverLogin();\n    // }, []);\n\n    const { OnGoogleLogin } = useSocialLogin();\n\n    return (\n        <div className=\"center\">\n            <div className=\"signinform\">\n                <div className=\"signinform__text\">\n                    <span>\n                        SKHUED <strong>IN</strong>에 로그인하고{\" \"}\n                        <strong>취뽀</strong>하기\n                    </span>\n                </div>\n\n                <div className=\"signinform__social\">\n                    <GoogleLogin\n                        clientId={\n                            process.env.REACT_APP_GOOGLE_CLIENT_ID as string\n                        }\n                        onSuccess={(result) => OnGoogleLogin(result)}\n                        onFailure={(result) => console.log(result)}\n                        cookiePolicy={\"single_host_origin\"}\n                        render={(props: any) => (\n                            <div\n                                className=\"signinform__social__logo\"\n                                onClick={props.onClick}\n                            >\n                                <img src={logoGoogle} alt=\"google\" />\n                            </div>\n                        )}\n                    />\n\n                    {/* <div\n                        id=\"kakao\"\n                        className=\"signinform__social__logo\"\n                        onClick={OnKakaoLogin}\n                    >\n                        <img src={logoKakao} alt=\"kakao\" />\n                    </div>\n\n                    <div className=\"signinform__social__logo\">\n                        <div id=\"naverIdLogin\"></div>\n                    </div> */}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SignInPresenter;\n","import { useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\n\nimport { useRecoilValue } from \"recoil\";\nimport { currentUserState } from \"store/user\";\n\nimport SignInPresenter from \"pages/signIn/presenter/SignInPresenter\";\n\ndeclare global {\n    interface Window {\n        Kakao: any;\n        naver: any;\n    }\n}\n\nconst SignInContainer = ({ history }: RouteComponentProps) => {\n    const currentUser = useRecoilValue(currentUserState);\n\n    useEffect(() => {\n        // 이미 로그인 된 사용자일 시\n        if (currentUser.isSigned) history.push(\"/\");\n    }, [currentUser, history]);\n\n    return <SignInPresenter />;\n};\n\nexport default SignInContainer;\n","import { useEffect } from \"react\";\nimport Loading from \"components/Loading/Loading\";\n\nimport useSocialLogin from \"hook/useSocialLogin\";\n\nconst SignInNaverContainer = () => {\n    const { OnNaverLogin } = useSocialLogin();\n\n    useEffect(() => {\n        OnNaverLogin();\n    }, [OnNaverLogin]);\n\n    return <Loading />;\n};\n\nexport default SignInNaverContainer;\n","import axios from \"axios\";\nimport { useMutation } from \"react-query\";\n\nimport { baseUrl } from \"api/url\";\n\ninterface IYears {\n    userId: number;\n    entranceYear: number;\n    graduationYear: number;\n}\n\nconst useUser = () => {\n    const userYearUpdateWithId = useMutation(\n        ({ userId, entranceYear, graduationYear }: IYears) => {\n            return axios.post(`${baseUrl}/api/users/${userId}`, {\n                entranceYear,\n                graduationYear,\n            });\n        }\n    );\n\n    return {\n        userYearUpdateWithId: userYearUpdateWithId.mutate,\n    };\n};\n\nexport default useUser;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n    ISignSettingChild,\n    SettingChildDiv,\n    NextBtn,\n} from \"pages/signinSetting/presenter/SignInSettingPresenter\";\n\ninterface ICheckStatus extends ISignSettingChild {\n    status: string;\n    setStatus: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst CheckStatus = ({ onNextClick, status, setStatus }: ICheckStatus) => {\n    const checkIsChecked = (value: string): boolean => {\n        return status === value;\n    };\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.target.id);\n    };\n\n    return (\n        <SettingChildDiv>\n            <RadioDiv>\n                <RadioInput\n                    type=\"radio\"\n                    id=\"Student\"\n                    checked={checkIsChecked(\"Student\")}\n                    onChange={onChange}\n                />\n                <RadioLabel htmlFor=\"Student\">\n                    <strong>재학생</strong>입니다 !\n                </RadioLabel>\n            </RadioDiv>\n            <RadioDiv>\n                <RadioInput\n                    type=\"radio\"\n                    id=\"Graduate\"\n                    checked={checkIsChecked(\"Graduate\")}\n                    onChange={onChange}\n                />\n                <RadioLabel htmlFor=\"Graduate\">\n                    <strong>졸업생</strong>입니다 !\n                </RadioLabel>\n            </RadioDiv>\n            {/* <RadioDiv>\n                <RadioInput\n                    type=\"radio\"\n                    id=\"Other\"\n                    checked={checkIsChecked(\"Other\")}\n                    onChange={onChange}\n                />\n                <RadioLabel htmlFor=\"Other\">\n                    그 외 <strong>관계자</strong>입니다 !\n                </RadioLabel>\n            </RadioDiv> */}\n\n            <NextBtn onClick={onNextClick}>다음</NextBtn>\n        </SettingChildDiv>\n    );\n};\n\nexport default CheckStatus;\n\nconst RadioDiv = styled.div`\n    width: 100%;\n    height: 70px;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst RadioInput = styled.input`\n    all: unset;\n    width: 34px;\n    height: 34px;\n\n    border-radius: 50%;\n    background-color: ${({ theme }) => theme.colors.bold};\n    box-shadow: 0 0 0 5px ${({ theme }) => theme.colors.emph} inset;\n    margin-right: 12px;\n\n    transform: scale(0.5);\n    opacity: 0;\n    transition: all 0.3s;\n    cursor: pointer;\n\n    &:checked {\n        transform: scale(1);\n        opacity: 1;\n    }\n`;\n\nconst RadioLabel = styled.label`\n    color: ${({ theme }) => theme.colors.emph};\n    font-size: 1.4rem;\n    font-weight: 100;\n    cursor: pointer;\n    transition: color 0.3s;\n\n    & strong {\n        font-weight: 700;\n    }\n\n    ${RadioInput}:checked + & {\n        color: ${({ theme }) => theme.colors.bold};\n    }\n`;\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n    SettingChildDiv,\n    NextBtn,\n} from \"pages/signinSetting/presenter/SignInSettingPresenter\";\n\ninterface IWriteYear {\n    status: string;\n    onSignin: () => void;\n    entranceYear: number;\n    setEntranceYear: React.Dispatch<React.SetStateAction<number>>;\n    graduationYear: number;\n    setGraduationYear: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst WriteYear = ({\n    status,\n    onSignin,\n    entranceYear,\n    setEntranceYear,\n    graduationYear,\n    setGraduationYear,\n}: IWriteYear) => {\n    const entranceCheckRef = useRef<HTMLInputElement>(null);\n    const graduationCheckRef = useRef<HTMLInputElement>(null);\n\n    const date = new Date();\n    const startYear: number = 2000;\n    const currentYear: number = date.getFullYear();\n    const yearDiff: number = currentYear - startYear + 1;\n\n    const YearList: number[] = Array.from(\n        { length: yearDiff },\n        (_, i) => startYear + i\n    );\n\n    const onClick = (e: React.MouseEvent<HTMLSpanElement>) => {\n        switch ((e.target as Element).parentElement?.id) {\n            case \"entranceYear\":\n                setEntranceYear(parseInt((e.target as Element).id));\n                if (entranceCheckRef.current)\n                    entranceCheckRef.current.checked = false;\n                break;\n\n            case \"graduationYear\":\n                const selectYear = parseInt((e.target as Element).id);\n                if (entranceYear >= selectYear) {\n                    alert(\"선택 할 수 없는 년도 입니다.\");\n                    return;\n                }\n                setGraduationYear(selectYear);\n                if (graduationCheckRef.current)\n                    graduationCheckRef.current.checked = false;\n                break;\n        }\n    };\n\n    const InputElementByCategory = (category: string) => (\n        <InputDiv>\n            <InputCheckbox\n                id={category}\n                type=\"checkbox\"\n                ref={\n                    category === \"entrance\"\n                        ? entranceCheckRef\n                        : graduationCheckRef\n                }\n            />\n            <SelectLabel htmlFor={category}>\n                {category === \"entrance\" ? entranceYear : graduationYear}\n            </SelectLabel>\n            <BackSpan />\n            <OverSpan />\n            <CandidateDiv id={`${category}Year`}>\n                {YearList.map((year, index) => (\n                    <CandidateSpan\n                        id={year.toString()}\n                        key={index}\n                        onClick={onClick}\n                    >\n                        {year}\n                    </CandidateSpan>\n                ))}\n            </CandidateDiv>\n        </InputDiv>\n    );\n\n    if (status === \"Graduate\")\n        return (\n            <SettingChildDiv>\n                <InputH2>\n                    <strong>입학</strong> 년도\n                </InputH2>\n                {InputElementByCategory(\"entrance\")}\n                <InputH2>\n                    <strong>졸업</strong> 년도\n                </InputH2>\n                {InputElementByCategory(\"graduation\")}\n                <NextBtn onClick={onSignin}>다음</NextBtn>\n            </SettingChildDiv>\n        );\n\n    return (\n        <SettingChildDiv>\n            <InputH2>\n                <strong>입학</strong> 년도\n            </InputH2>\n            {InputElementByCategory(\"entrance\")}\n            <NextBtn onClick={onSignin}>다음</NextBtn>\n        </SettingChildDiv>\n    );\n};\n\nexport default WriteYear;\n\nconst InputDiv = styled.div`\n    position: relative;\n    width: 100%;\n    height: 60px;\n    /* background-color: white; */\n    margin-bottom: 1rem;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: start;\n`;\n\nconst InputH2 = styled.h2`\n    font-size: 1.3rem;\n    font-weight: 300;\n`;\n\nconst InputCheckbox = styled.input`\n    all: unset;\n`;\n\nconst SelectLabel = styled.label`\n    width: 100%;\n    margin-left: 6px;\n    font-size: 1.3rem;\n    cursor: pointer;\n`;\n\nconst BackSpan = styled.span`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 3px;\n    background-color: ${({ theme }) => theme.colors.emph};\n    opacity: 0.3;\n`;\n\nconst OverSpan = styled.span`\n    z-index: 100;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 3px;\n    background-color: ${({ theme }) => theme.colors.emph};\n\n    transform: scaleX(0);\n    transform-origin: left;\n    transition: transform 0.3s;\n\n    ${InputCheckbox}:checked ~ & {\n        transform: scaleX(1);\n    }\n`;\n\nconst CandidateDiv = styled.div`\n    position: absolute;\n    top: 110%;\n    left: 0;\n    z-index: 1;\n\n    display: flex;\n    flex-direction: column;\n    /* gap: 8px; */\n\n    width: 100%;\n    height: 300px;\n    background-color: white;\n    /* padding: 6px; */\n    overflow: scroll;\n\n    opacity: 0;\n    transform: translateX(20px);\n    visibility: hidden;\n    transition: all 0.3s;\n\n    ${InputCheckbox}:checked ~ & {\n        opacity: 1;\n        transform: translateX(0);\n        visibility: visible;\n    }\n`;\n\nconst CandidateSpan = styled.span`\n    display: flex;\n    align-items: center;\n\n    flex-shrink: 0;\n    width: 100%;\n    height: 50px;\n    padding: 6px;\n\n    font-size: 1.2rem;\n    cursor: pointer;\n    transition: all 0.3s;\n\n    &:hover {\n        color: ${({ theme }) => theme.colors.white};\n        background-color: ${({ theme }) => theme.colors.emph};\n    }\n`;\n","import { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n    ISignSettingChild,\n    SettingChildDiv,\n    NextBtn,\n} from \"pages/signinSetting/presenter/SignInSettingPresenter\";\n\ninterface IAgreement extends ISignSettingChild {\n    userName: string | undefined;\n}\n\nconst Agreement = ({ onNextClick, userName }: IAgreement) => {\n    const [isAgree, setIsAgree] = useState<boolean>(false);\n\n    const onChange = () => {\n        setIsAgree(!isAgree);\n    };\n\n    const checkValidation = () => {\n        if (isAgree) onNextClick();\n        else alert(\"약관 동의 부탁드립니다 !\");\n    };\n\n    const memberAgreement: string =\n        \"1. 본 약관의 스쿠드인 사이트가 제공하는 모든 서비스(이하 '서비스')의 이용조건 및 절차, 이용자와 스쿠드인 사이트의 권리, 의무, 책임사항과 기타 필요한 사항을 규정함을 목적으로 합니다. 2. 약관의 효력과 변경 - 스쿠드인 사이트는 귀하가 본 약관 내용에 동의하는 경우 스쿠드인 사이트의 서비스 제공 행위 및 귀화의 서비스 사용 행위에 본 약관이 우선적으로 적용됩니다. - 스쿠드인 사이트는 본 약관을 사전 고지 없이 변경할 수 있고 변경된 약관은 스쿠드인 사이트 내에 공지하거나 e-mail을 통해 회원에게 공지하며, 공지와 동시에 그 효력이 발생됩니다.\";\n\n    const privacyAgreement: string =\n        \"스쿠드인은 개인정보보호법 제15조제1항제1호, 제17조제1항제1호, 제23조제1호, 제24조제1항 제1호에 따라 아래와 같이 개인정보의 수집, 이용에 관하여 귀하의 동의를 얻고자 합니다. 스쿠드인은 이용자의 사전 동의 없이는 이용자의 개인정보를 함부로 공개하지 않으며, 수집된 정보는 아래와 같이 이용하고 있습니다. 이용자가 제공한 모든 정보는 아래의 목적에 필요한 용도 이외로는 사용되지 않으며 이용 목적이 변경될 시에는 이를 알리고 동의를 구할 것입니다.\";\n\n    return (\n        <SettingChildDiv>\n            <AgreementWelcome>\n                안녕하세요 <strong>{userName}</strong>님 !\n            </AgreementWelcome>\n            <AgreementHeading>회원약관</AgreementHeading>\n            <AgreementDiv>\n                <p>{memberAgreement}</p>\n            </AgreementDiv>\n            <AgreementHeading>개인정보 수집 및 이용 동의\b</AgreementHeading>\n            <AgreementDiv>\n                <p>{privacyAgreement}</p>\n            </AgreementDiv>\n\n            <CheckDiv>\n                <Check\n                    id=\"agreement\"\n                    type=\"checkbox\"\n                    checked={isAgree}\n                    onChange={onChange}\n                />\n                <CheckLabel htmlFor=\"agreement\">전체 약관 동의</CheckLabel>\n            </CheckDiv>\n\n            <NextBtn onClick={checkValidation}>다음</NextBtn>\n        </SettingChildDiv>\n    );\n};\n\nexport default Agreement;\n\nconst AgreementWelcome = styled.h2`\n    color: ${({ theme }) => theme.colors.emph};\n    margin-bottom: 12px;\n    font-weight: 100;\n\n    & strong {\n        font-weight: 700;\n    }\n`;\n\nconst AgreementHeading = styled.h2`\n    color: ${({ theme }) => theme.colors.emph};\n    font-size: 1rem;\n    margin-bottom: 6px;\n`;\n\nconst AgreementDiv = styled.div`\n    width: 100%;\n    height: 60px;\n    overflow: scroll;\n    margin-bottom: 18px;\n`;\n\nconst CheckDiv = styled.div`\n    width: 100%;\n    height: 50px;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst Check = styled.input`\n    all: unset;\n    width: 1rem;\n    height: 1rem;\n    background-color: white;\n    cursor: pointer;\n    transition: all 0.3s;\n\n    &:checked {\n        border-radius: 50%;\n        box-shadow: 0 0 0 3px ${({ theme }) => theme.colors.emph} inset;\n        background-color: ${({ theme }) => theme.colors.bold};\n    }\n`;\n\nconst CheckLabel = styled.label`\n    font-size: 1rem;\n    font-weight: bold;\n    color: ${({ theme }) => theme.colors.emph};\n    margin-left: 10px;\n    cursor: pointer;\n    transition: color 0.3s;\n\n    ${Check}:checked + & {\n        color: ${({ theme }) => theme.colors.bold};\n    }\n`;\n","import React, { useState } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport styled from \"styled-components\";\n\nimport CheckStatus from \"components/SigninSetting/CheckStatus\";\nimport WriteYear from \"components/SigninSetting/WriteYear\";\nimport Agreement from \"components/SigninSetting/Agreement\";\n\ninterface ISignInSettingPresenter {\n    userName: string | undefined;\n    onSignin: () => void;\n    status: string;\n    setStatus: React.Dispatch<React.SetStateAction<string>>;\n    entranceYear: number;\n    setEntranceYear: React.Dispatch<React.SetStateAction<number>>;\n    graduationYear: number;\n    setGraduationYear: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst SignInSettingPresenter = ({\n    userName,\n    onSignin,\n    status,\n    setStatus,\n    entranceYear,\n    setEntranceYear,\n    graduationYear,\n    setGraduationYear,\n}: ISignInSettingPresenter) => {\n    const [contentId, setContentId] = useState<number>(0);\n\n    const onNextClick = () => {\n        setContentId((prev) => prev + 1);\n    };\n\n    const seeingContent = [\n        <Agreement onNextClick={onNextClick} userName={userName} />,\n        <CheckStatus\n            onNextClick={onNextClick}\n            status={status}\n            setStatus={setStatus}\n        />,\n        <WriteYear\n            onSignin={onSignin}\n            status={status}\n            entranceYear={entranceYear}\n            setEntranceYear={setEntranceYear}\n            graduationYear={graduationYear}\n            setGraduationYear={setGraduationYear}\n        />,\n    ];\n\n    return (\n        <TransitionGroup>\n            <CSSTransition key={contentId} classNames=\"slide\" timeout={1200}>\n                <SettingDiv>{seeingContent[contentId]}</SettingDiv>\n            </CSSTransition>\n        </TransitionGroup>\n    );\n};\n\nexport default SignInSettingPresenter;\n\nconst SettingDiv = styled.div`\n    width: 100vw;\n    height: calc(100vh - 100px);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n`;\n\nexport interface ISignSettingChild {\n    onNextClick: () => void;\n}\n\nexport const SettingChildDiv = styled.div`\n    position: relative;\n    width: 600px;\n    height: 400px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: start;\n`;\n\nexport const NextBtn = styled.button`\n    all: unset;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n\n    width: 50px;\n    height: 35px;\n    text-align: center;\n    color: ${({ theme }) => theme.colors.emph};\n    background-color: ${({ theme }) => theme.colors.white};\n    clip-path: polygon(85% 0, 100% 50%, 85% 100%, 0% 100%, 15% 50%, 0% 0%);\n\n    font-size: 12px;\n    cursor: pointer;\n\n    transition: all 0.3s;\n    &:hover {\n        color: ${({ theme }) => theme.colors.white};\n        background-color: ${({ theme }) => theme.colors.emph};\n    }\n`;\n","import { useState, useEffect } from \"react\";\nimport { RouteChildrenProps } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport { useRecoilState } from \"recoil\";\nimport { currentUserState } from \"store/user\";\n\nimport { ICurrentUser } from \"types\";\nimport useUser from \"hook/useUser\";\nimport useUserSession from \"hook/useUserSession\";\nimport SignInSettingPresenter from \"pages/signinSetting/presenter/SignInSettingPresenter\";\n\nexport interface ILocationState {\n    userData: ICurrentUser;\n    token: string;\n}\n\nconst SignInSettingContainer = ({ location, history }: RouteChildrenProps) => {\n    const [status, setStatus] = useState<string>(\"Student\");\n    const [entranceYear, setEntranceYear] = useState<number>(2017);\n    const [graduationYear, setGraduationYear] = useState<number>(0);\n    const [currentUser, setCurrentUser] = useRecoilState(currentUserState);\n\n    const { userYearUpdateWithId } = useUser();\n    const { setUserTokenAndId } = useUserSession();\n\n    useEffect(() => {\n        if (currentUser.isSigned || !currentUser.token) history.push(\"/signin\");\n    }, [currentUser.isSigned, currentUser.token, history]);\n\n    const onSignin = () => {\n        console.log(`입학년도 : ${entranceYear}`);\n        console.log(`졸업년도 : ${graduationYear}`);\n\n        if (currentUser.data && currentUser.token) {\n            axios.defaults.headers.common[\n                \"Authorization\"\n            ] = `Bearer ${currentUser.token}`;\n\n            userYearUpdateWithId({\n                userId: currentUser.data.id,\n                graduationYear,\n                entranceYear,\n            });\n\n            setCurrentUser({\n                ...currentUser,\n                isSigned: true,\n                data: {\n                    ...currentUser.data,\n                    entranceYear: entranceYear.toString(),\n                    graduationYear: graduationYear.toString(),\n                },\n            });\n\n            setUserTokenAndId({\n                token: currentUser.token,\n                id: currentUser.data.id,\n            });\n\n            history.push(\"/\");\n        }\n    };\n\n    return (\n        <SignInSettingPresenter\n            userName={currentUser.data?.name}\n            onSignin={onSignin}\n            status={status}\n            setStatus={setStatus}\n            entranceYear={entranceYear}\n            setEntranceYear={setEntranceYear}\n            graduationYear={graduationYear}\n            setGraduationYear={setGraduationYear}\n        />\n    );\n};\n\nexport default SignInSettingContainer;\n","// import { useState } from \"react\";\n// import SignInput from \"components/Sign/SignInput\";\n\nconst SignUpPresenter = () => {\n    // 이메일, 비번, 이름, (프로필사진), 입학년도, 졸업년도,\n    // const [email, setEmail] = useState<string>(\"\");\n    // const [id, setId] = useState<string>(\"\");\n    // const [password, setPassword] = useState<string>(\"\");\n    // const [confirmPassword, setConfirmPassword] = useState<string>(\"\");\n\n    // const [entranceYear, setEntranceYear] = useState<string>(\"\");\n    // const [graduationYear, setGraduationYear] = useState<string>(\"\");\n\n    // return (\n    //     <div className=\"center\">\n    //         <div className=\"signinform signupform\">\n    //             <div className=\"signinform__text\">\n    //                 <span>회원가입</span>\n    //             </div>\n\n    //             <SignInput type=\"e-mail\" text=\"E-mail\" setState={setEmail} />\n    //             <SignInput text=\"ID\" setState={setId} />\n    //             <SignInput text=\"Password\" setState={setPassword} />\n    //             <SignInput\n    //                 text=\"Password Confirm\"\n    //                 setState={setConfirmPassword}\n    //             />\n\n    //             <div className=\"signinform__text\">\n    //                 <span>개인정보</span>\n    //             </div>\n\n    //             <SignInput text=\"입학 년도\" setState={setEntranceYear} />\n    //             <SignInput text=\"졸업 년도\" setState={setGraduationYear} />\n\n    //             <button type=\"submit\" className=\"signinform__btn\">\n    //                 Sign Up\n    //             </button>\n    //         </div>\n    //     </div>\n    // );\n    return <div></div>;\n};\n\nexport default SignUpPresenter;\n","import Error from \"components/Error/Error\";\nimport { useHistory } from \"react-router\";\nimport { useRecoilValue } from \"recoil\";\nimport { currentUserState } from \"store/user\";\nimport styled from \"styled-components\";\n\nconst Profile = () => {\n    const history = useHistory();\n    const currentUser = useRecoilValue(currentUserState);\n\n    const onGraduateClick = () => {\n        history.push(\"/graduate\");\n    };\n\n    if (!currentUser.data) return <Error />;\n    return (\n        <StyledMain>\n            <ImageAside>\n                <StyledImg src={currentUser.data?.userImageUrl} alt=\"profile\" />\n            </ImageAside>\n            <InfoSection>\n                <NameDiv>\n                    <InfoArticle>\n                        <Title>이름</Title>\n                        <Info>{currentUser.data?.name}</Info>\n                    </InfoArticle>\n                </NameDiv>\n                <InfoDiv>\n                    <InfoArticle>\n                        <Title>E-mail</Title>\n                        <Info>{currentUser.data?.email}</Info>\n                    </InfoArticle>\n                    <InfoArticle>\n                        <Title>입학년도</Title>\n                        <Info>{currentUser.data?.entranceYear}</Info>\n                    </InfoArticle>\n                </InfoDiv>\n            </InfoSection>\n            <GraduateBtn onClick={onGraduateClick}>졸업 했어요 !</GraduateBtn>\n        </StyledMain>\n    );\n};\n\nexport default Profile;\n\nconst StyledMain = styled.main`\n    position: relative;\n    width: 768px;\n    border-radius: ${({ theme }) => theme.border_intensity};\n    background-color: white;\n    padding: 12px 14px;\n\n    display: flex;\n    align-items: center;\n`;\n\nconst ImageAside = styled.aside`\n    width: 200px;\n    height: 200px;\n    float: left;\n    border-radius: 50%;\n    overflow: hidden;\n    flex-shrink: 0;\n`;\n\nconst StyledImg = styled.img`\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n`;\n\nconst InfoSection = styled.section`\n    width: 100%;\n    height: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst NameDiv = styled.div`\n    width: 70%;\n`;\n\nconst InfoDiv = styled.div`\n    width: 70%;\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst InfoArticle = styled.article`\n    width: 30%;\n    height: 80px;\n    overflow-x: scroll;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n`;\n\nconst Title = styled.h3`\n    color: ${({ theme }) => theme.colors.bold};\n    font-size: 18px;\n`;\n\nconst Info = styled.span`\n    font-size: 16px;\n`;\n\nconst GraduateBtn = styled.button`\n    all: unset;\n    text-align: center;\n    font-size: 14px;\n\n    position: absolute;\n    right: 0;\n    bottom: -52px;\n    padding: 12px 16px;\n    align-self: flex-end;\n    cursor: pointer;\n\n    background-color: white;\n    border-radius: ${({ theme }) => theme.border_intensity};\n    transition: color 0.3s, background-color 0.3s;\n\n    &:hover {\n        color: white;\n        background-color: ${({ theme }) => theme.colors.emph};\n    }\n`;\n","import styled from \"styled-components\";\nimport Profile from \"components/Mypage/Profile\";\n\nconst MypagePresenter = () => {\n    return (\n        <StyledMain>\n            <Profile />\n        </StyledMain>\n    );\n};\n\nexport default MypagePresenter;\n\nconst StyledMain = styled.main`\n    width: 100vw;\n    height: 70vh;\n    padding: ${({ theme }) => theme.layout_padding};\n    display: flex;\n    flex-direction: column;\n    \n    justify-content: center;\n    align-items: center;\n`;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { currentUserState } from \"store/user\";\nimport useBlogByUserId from \"hook/useBlogByUserId\";\nimport MypagePresenter from \"../presenter/MypagePresenter\";\n\nconst MypageContainer = () => {\n    const currentUser = useRecoilValue(currentUserState);\n    const history = useHistory();\n    const { getBlogByUserId } = useBlogByUserId();\n\n    useEffect(() => {\n        const pushWhenBlog = async () => {\n            const blogData = await getBlogByUserId(currentUser.data?.id);\n            history.push(`/library/${blogData.id}`);\n        };\n\n        if (currentUser.data?.isBlog) {\n            pushWhenBlog();\n            return;\n        }\n    }, [\n        history,\n        getBlogByUserId,\n        currentUser.data?.id,\n        currentUser.data?.isBlog,\n    ]);\n    return <MypagePresenter />;\n};\n\nexport default MypageContainer;\n","import { baseUrl } from \"api/url\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router\";\nimport { useRecoilValue } from \"recoil\";\nimport { currentUserState } from \"store/user\";\nimport { IPost } from \"types\";\nimport useBlogByUserId from \"./useBlogByUserId\";\n\ninterface createPostProps {\n    title: string;\n    content: string;\n    isPush?: boolean;\n}\n\ninterface IPostResponse {\n    data: IPost;\n}\n\nconst usePost = () => {\n    const currentUser = useRecoilValue(currentUserState);\n    const history = useHistory();\n    const { getBlogByUserId } = useBlogByUserId();\n\n    const createPost = async ({\n        title,\n        content,\n        isPush = true,\n    }: createPostProps) => {\n        if (!currentUser.data) return;\n\n        const currentBlog = await getBlogByUserId(currentUser.data.id);\n\n        const {\n            data: { data: response },\n        } = await axios.post<IPostResponse>(`${baseUrl}/api/posts`, {\n            blogId: currentBlog.id,\n            title,\n            content,\n        });\n\n        if (!isPush) return;\n        history.push(`/post/${response.id}`);\n    };\n\n    return { createPost };\n};\n\nexport default usePost;\n","function loadSuggestions(text: string): any {\n    return new Promise((accept, reject) => {\n        setTimeout(() => {\n            const suggestions = [\n                {\n                    preview: \"제목\",\n                    value: \"# \",\n                },\n                {\n                    preview: \"인용\",\n                    value: \"> \",\n                },\n                {\n                    preview: \"강조\",\n                    value: \"** **\",\n                },\n                {\n                    preview: \"링크 달기\",\n                    value: \"[링크](url)\",\n                },\n                {\n                    preview: \"이미지\",\n                    value: \"![이미지 글](url)\",\n                },\n            ].filter((i) =>\n                i.preview.toLowerCase().includes(text.toLowerCase())\n            );\n            accept(suggestions);\n        }, 250);\n    });\n}\n\nexport default loadSuggestions;\n","import React, { useState } from \"react\";\nimport ReactMde from \"react-mde\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport loadSuggestions from \"utils/loadSuggestions\";\n\ninterface MarkdownEditorProps {\n    defaultValue: string;\n    onChange: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst MarkdownEditor = ({ defaultValue, onChange }: MarkdownEditorProps) => {\n    const [selectedTab, setSelectedTab] =\n        useState<\"write\" | \"preview\">(\"write\");\n\n    return (\n        <ReactMde\n            value={defaultValue}\n            onChange={onChange}\n            selectedTab={selectedTab}\n            onTabChange={setSelectedTab}\n            generateMarkdownPreview={(markdown) =>\n                Promise.resolve(<ReactMarkdown source={markdown} />)\n            }\n            childProps={{\n                writeButton: {\n                    tabIndex: -1,\n                },\n            }}\n            loadSuggestions={loadSuggestions}\n            minEditorHeight={72}\n            minPreviewHeight={72}\n            heightUnits={\"vh\"}\n        ></ReactMde>\n    );\n};\n\nexport default MarkdownEditor;\n","import { useState, useEffect } from \"react\";\n\nconst setClockFormat = (text: number): string => {\n    let value: string = text.toString();\n\n    if (10 > text) {\n        value = `0${text}`;\n    }\n\n    return value;\n};\n\nconst Clock = () => {\n    const [time, setTime] = useState<string[]>([\"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            const date = new Date();\n            setTime(\n                (\n                    setClockFormat(date.getHours()) +\n                    setClockFormat(date.getMinutes()) +\n                    setClockFormat(date.getSeconds())\n                ).split(\"\")\n            );\n        }, 1000);\n\n        return () => {\n            clearInterval(interval);\n        };\n    }, []);\n    return (\n        <div className=\"clock\">\n            {time.map((word, index) => (\n                <span className=\"clock--element\" key={index}>\n                    {word}\n                </span>\n            ))}\n        </div>\n    );\n};\n\nexport default Clock;\n","import styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMarkdown } from \"@fortawesome/free-brands-svg-icons\";\n\nimport MarkdownEditor from \"components/Writing/MarkdownEditor\";\nimport Clock from \"./Clock/Clock\";\nimport React from \"react\";\n\ninterface MarkdownSectionProps {\n    isReadOnly?: boolean;\n    title: string;\n    onTitleChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    content: string;\n    onContentChange: React.Dispatch<React.SetStateAction<string>>;\n    onSubmit: () => void;\n}\n\nconst MarkdownSection = ({\n    isReadOnly = false,\n    title,\n    onTitleChange,\n    content,\n    onContentChange,\n    onSubmit,\n}: MarkdownSectionProps) => {\n    const ReadOnlyInput = () => {\n        return <input id=\"writer\" type=\"text\" readOnly value={title} />;\n    };\n\n    return (\n        <div className=\"writing\">\n            <div className=\"writing__form\">\n                <div className=\"writing__form__title\">\n                    <div className=\"writing__form__title__input\">\n                        {isReadOnly ? (\n                            <ReadOnlyInput />\n                        ) : (\n                            <React.Fragment>\n                                <input\n                                    id=\"writer\"\n                                    type=\"text\"\n                                    onChange={onTitleChange}\n                                    required\n                                />\n                                <label\n                                    htmlFor=\"writer\"\n                                    className=\"writing__form__title__input--placeholder\"\n                                >\n                                    제목을 입력해주세요\n                                </label>\n                            </React.Fragment>\n                        )}\n                    </div>\n                    <Clock />\n                </div>\n\n                <MarkdownEditor\n                    defaultValue={content}\n                    onChange={onContentChange}\n                />\n\n                <SubmitAdvice href=\"https://guides.github.com/features/mastering-markdown/\">\n                    <FontAwesomeIcon icon={faMarkdown} />\n                    &nbsp;마크다운 문법을 지원합니다\n                </SubmitAdvice>\n            </div>\n            <SubmitBtn onClick={onSubmit}>작성 완료</SubmitBtn>\n        </div>\n    );\n};\n\nexport default MarkdownSection;\n\nconst SubmitAdvice = styled.a`\n    all: unset;\n    color: black;\n    cursor: pointer;\n    align-self: flex-end;\n\n    font-size: 0.85rem;\n    opacity: 0.8;\n\n    &:hover {\n        text-decoration: underline;\n    }\n`;\n\nconst SubmitBtn = styled.button`\n    all: unset;\n    cursor: pointer;\n    position: fixed;\n    left: calc(75vw + 8px);\n\n    width: 100px;\n    height: 50px;\n    background-color: white;\n    text-align: center;\n    transition: color 0.3s, background-color 0.3s;\n\n    &:hover {\n        color: white;\n        background-color: ${({ theme }) => theme.colors.emph};\n    }\n`;\n","import React, { useState } from \"react\";\n\nimport usePost from \"hook/usePost\";\nimport MarkdownSection from \"components/MarkdownSection\";\nimport \"pages/writing/Writing.scss\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nconst WritingPresenter = () => {\n    const { createPost } = usePost();\n    const [title, setTitle] = useState<string>(\"\");\n    const [content, setContent] = useState<string>(\n        `# 큰 글자\n## 두 번째로 큰 글자\n### 세 번째로 큰 글자\n...\n중간 선\n---\n> 누군가 말했어요\\n\n**강조** *이테릭체*\\n\n![profile](https://user-images.githubusercontent.com/26461307/113733635-9c85b000-9735-11eb-9775-c54b121d100f.png)\\n\n[링크 태그](www.hyesungoh.xyz)\n\n`\n    );\n\n    const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const {\n            target: { value },\n        } = e;\n        setTitle(value);\n    };\n\n    const handleSubmit = () => {\n        if (title.length === 0 || content.length === 0) {\n            alert(\"조금 더 써주세요 !\");\n            return;\n        }\n\n        createPost({ title, content });\n    };\n\n    return (\n        <MarkdownSection\n            title={title}\n            onTitleChange={handleTitleChange}\n            content={content}\n            onContentChange={setContent}\n            onSubmit={handleSubmit}\n        />\n    );\n};\n\nexport default WritingPresenter;\n","import styled from \"styled-components\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport convertDate from \"utils/convertDate\";\n\ninterface PostSectionProps {\n    title: string;\n    content: string;\n    view: number;\n    createdDate: string;\n    lastModifiedDate: string;\n}\n\nconst PostSection = ({\n    title,\n    content,\n    view,\n    createdDate,\n    lastModifiedDate,\n}: PostSectionProps) => {\n    const { year, month, day, hour, minute } = convertDate(createdDate);\n\n    return (\n        <StyledSection className=\"mde-preview\">\n            <PostHeading>{title}</PostHeading>\n            <PostDate>{`${year}년 ${month}월 ${day}일, ${hour}시 ${minute}분에 쓴 글`}</PostDate>\n            <div className=\"mde-preview-content\">\n                <ReactMarkdown>{content}</ReactMarkdown>\n            </div>\n        </StyledSection>\n    );\n};\n\nexport default PostSection;\n\nconst StyledSection = styled.section`\n    width: 600px;\n    min-height: 100vh;\n    height: auto;\n    padding: 10px 12px;\n\n    background-color: ${({ theme }) => theme.colors.white};\n    border-radius: ${({ theme }) => theme.border_intensity};\n`;\n\nconst PostHeading = styled.h1`\n    font-size: 1.2rem;\n`;\n\nconst PostDate = styled.span`\n    font-size: 0.8rem;\n    opacity: 0.5;\n`;\n","import { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport { IUser } from \"types\";\n\ninterface WriterSectionProps {\n    writer: IUser;\n    blogId: number;\n}\n\nconst WriterSection = ({ writer, blogId }: WriterSectionProps) => {\n    const history = useHistory();\n\n    const onNameClick = () => {\n        history.push(`/library/${blogId}`);\n    };\n\n    return (\n        <StyledSection>\n            <ProfileImageDiv\n                onClick={onNameClick}\n                style={{ cursor: \"pointer\" }}\n            >\n                <ProfileImage\n                    src={writer.userImageUrl}\n                    alt={`${writer.name} profile image`}\n                />\n            </ProfileImageDiv>\n            <ProfileInfoDiv>\n                <BoldSpan onClick={onNameClick} style={{ cursor: \"pointer\" }}>\n                    {writer.name}\n                </BoldSpan>\n                <SoftSpan>{writer.email}</SoftSpan>\n\n                <ProfileYearDiv>\n                    <ProfileSeparatedDiv>\n                        <BoldSpan>입학 년도</BoldSpan>\n                        <SoftSpan>{writer.entranceYear}</SoftSpan>\n                    </ProfileSeparatedDiv>\n                    <ProfileSeparatedDiv>\n                        <BoldSpan>졸업 년도</BoldSpan>\n                        <SoftSpan>{writer.graduationYear}</SoftSpan>\n                    </ProfileSeparatedDiv>\n                </ProfileYearDiv>\n            </ProfileInfoDiv>\n        </StyledSection>\n    );\n};\n\nexport default WriterSection;\n\nconst StyledSection = styled.section`\n    position: sticky;\n    top: 90px;\n\n    width: 300px;\n    height: 320px;\n    padding: 10px 10px;\n    background-color: ${({ theme }) => theme.colors.white};\n    border-radius: ${({ theme }) => theme.border_intensity};\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nconst ProfileInfoDiv = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst BoldSpan = styled.span`\n    font-size: 1rem;\n\n    &:hover {\n        color: ${({ theme }) => theme.colors.bold};\n    }\n`;\n\nconst ProfileImageDiv = styled.div`\n    position: relative;\n    overflow: hidden;\n\n    width: 200px;\n    height: 200px;\n    border-radius: 50%;\n    background-color: red;\n    margin-bottom: 8px;\n\n    &:hover ~ ${ProfileInfoDiv} > ${BoldSpan} {\n        color: ${({ theme }) => theme.colors.bold};\n    }\n`;\n\nconst ProfileImage = styled.img`\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n`;\n\nconst SoftSpan = styled.span`\n    font-size: 0.8rem;\n    opacity: 0.5;\n`;\n\nconst ProfileYearDiv = styled.div`\n    width: 100%;\n    display: flex;\n    margin-top: 8px;\n`;\n\nconst ProfileSeparatedDiv = styled.div`\n    width: 50%;\n    display: flex;\n    flex-direction: column;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { IUser } from \"types\";\nimport PostSection from \"components/Post/PostSection\";\nimport WriterSection from \"components/Post/WriterSection\";\n\ninterface IPostPresenter {\n    isLoading: boolean;\n    title: string;\n    content: string;\n    view: number;\n    createdDate: string;\n    lastModifiedDate: string;\n    writer: IUser;\n    blogId: number;\n}\n\nconst PostPresenter = ({\n    isLoading,\n    title,\n    content,\n    view,\n    createdDate,\n    lastModifiedDate,\n    writer,\n    blogId,\n}: IPostPresenter) => {\n    return (\n        <StyledMain>\n            <PostSection\n                title={title}\n                content={content}\n                view={view}\n                createdDate={createdDate}\n                lastModifiedDate={lastModifiedDate}\n            />\n            <WriterSection writer={writer} blogId={blogId} />\n        </StyledMain>\n    );\n};\n\nexport default PostPresenter;\n\nconst StyledMain = styled.main`\n    width: 100vw;\n    height: auto;\n\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n`;","import {baseUrl} from \"api/url\";\n\nexport const GET_POST_BY_ID_URL = (id: string) => `${baseUrl}/api/posts/${id}`;\n\n\n","import axios from \"axios\";\nimport { GET_POST_BY_ID_URL } from \"api/post/url\";\nimport { IGetPostById } from \"types/fetch\";\n\nexport const getPostById = async (id: string) => {\n    const response = await axios.get<IGetPostById>(GET_POST_BY_ID_URL(id));\n    \n    return response.data.data;\n};\n","import { useParams } from \"react-router\";\nimport { useQuery } from \"react-query\";\n\nimport PostPresenter from \"pages/post/presenter/PostPresenter\";\nimport { getPostById } from \"api/post/fetch\";\nimport Loading from \"components/Loading/Loading\";\n\ninterface IParams {\n    id: string;\n}\n\nconst PostContainer = () => {\n    const { id } = useParams<IParams>();\n    const { data, isLoading } = useQuery(\"post\", () => getPostById(id));\n\n    console.log(data);\n    if (!data) return <Loading />;\n    return (\n        <PostPresenter\n            isLoading={isLoading}\n            title={data.title}\n            content={data.content}\n            view={data.view}\n            createdDate={data.createdDate}\n            lastModifiedDate={data.lastModifiedDate}\n            writer={data.user}\n            blogId={data.blogId}\n        />\n    );\n};\n\nexport default PostContainer;\n","import { atom } from \"recoil\";\n\nexport const slideIdState = atom<number>({\n    key: \"slideIdState\",\n    default: 0,\n});\n\nexport const contentState = atom<string>({\n    key: \"contentState\",\n    default: \"\",\n});\n\nexport const profileImageState = atom<File | undefined>({\n    key: \"profileImageState\",\n    default: undefined,\n});\n\nexport const questionFirstState = atom<string>({\n    key: \"questionFirstState\",\n    default: `### 간단한 자기소개 부탁드립니다 !\n\n**학번** : 201732037\n\n**전공 ( 부전공/복수전공이 있다면 적어주세요)** : 소프트웨어 공학과\n\n**간단한 인사** :\n\n안녕하세요 18학번 허수진 입니다 ! 저를 아는 사람들도 있을텐데 오랜만에 학교 사람들을 만나는 기분이라 설레네요 ~`,\n});\n\nexport const questionSecondState = atom<string>({\n    key: \"questionSecondState\",\n    default: `### 1. 학교에서 학년 별로 어떤 생활을 했었는지 간단히 적어주세요 !\n\n**1학년** :\n\n**2학년** :\n\n**3학년** :\n\n**4학년** :\n\n### 2. 들었던 수업 중 여러 의미로 가장 기억에 남는 수업 썰 2개만 풀어주세요 ~\n\n### 3. 학교 다니면서 자신의 성적은 어땠나요? 구체적으로 말씀하고 싶지 않으시면 상중하로 나누셔도 됩니다!\n\n### 4. 했던 동아리\n    `,\n});\n\nexport const questionThirdState = atom<string>({\n    key: \"questionThirdState\",\n    default: `\n### 1.\t현재 어떤 직군에서 어떤 직업을 가지고 일하고 계시나요?\n\n### 2.\t직업을 선택하게 된 계기\n\n### 3.\t취업 준비는 어떻게 하셨나요?\n\n### 4.\t후배들에게 해주고 싶은 말\n\n`,\n});\n","import { baseUrl } from \"api/url\";\nimport axios from \"axios\";\nimport { useMutation } from \"react-query\";\nimport { useRecoilValue, useRecoilState } from \"recoil\";\n\nimport { contentState, profileImageState } from \"store/regist\";\nimport { currentUserState } from \"store/user\";\n\nconst useRegist = () => {\n    const content = useRecoilValue(contentState);\n    const [currentUser, setCurrentUser] = useRecoilState(currentUserState);\n    const profileImage = useRecoilValue(profileImageState);\n\n    const onSuccess = (res: any) => {\n        if (currentUser.data) {\n            setCurrentUser({\n                ...currentUser,\n                data: { ...currentUser.data, isBlog: true },\n            });\n        }\n        return res;\n    };\n\n    const registBlog = useMutation(\n        () => {\n            const formData = new FormData();\n            formData.append(\"file\", profileImage as any);\n\n            return axios({\n                method: \"post\",\n                url: `${baseUrl}/api/blogs`,\n                headers: { \"Content-Type\": \"multipart/form-data\" },\n                params: {\n                    file: formData,\n                    userId: currentUser.data?.id,\n                    content,\n                },\n            });\n        },\n        {\n            onSuccess: (res) => onSuccess(res),\n            onError: (res) => {\n                console.log(res);\n            },\n        }\n    );\n\n    return {\n        isLoading: registBlog.isLoading,\n        error: registBlog.error,\n        registBlog: registBlog.mutate,\n    };\n};\n\nexport default useRegist;\n","import { useRecoilState, useRecoilValue, useResetRecoilState } from \"recoil\";\n\nimport {\n    contentState,\n    profileImageState,\n    questionFirstState,\n    questionSecondState,\n    questionThirdState,\n    slideIdState,\n} from \"store/regist\";\n\nimport usePost from \"hook/usePost\";\nimport useRegist from \"hook/useRegist\";\nimport { useHistory } from \"react-router-dom\";\nimport { currentUserState } from \"store/user\";\n\nconst useSlide = () => {\n    const [slideId, setSlideId] = useRecoilState(slideIdState);\n\n    const { registBlog } = useRegist();\n    const { createPost } = usePost();\n    const history = useHistory();\n\n    const currentUser = useRecoilValue(currentUserState);\n    const resetContent = useResetRecoilState(contentState);\n    const resetProfileImage = useResetRecoilState(profileImageState);\n    const questionFirst = useRecoilValue(questionFirstState);\n    const resetQuestionFirst = useResetRecoilState(questionFirstState);\n    const questionSecond = useRecoilValue(questionSecondState);\n    const resetQuestionSecond = useResetRecoilState(questionSecondState);\n    const questionThird = useRecoilValue(questionThirdState);\n    const resetQuestionThird = useResetRecoilState(questionThirdState);\n\n    const profileImage = useRecoilValue(profileImageState);\n    // 질문들한테 뒤로가기 넣어주기\n    const onClickBefore = () => {\n        setSlideId(slideId - 1);\n    };\n\n    const onClickNext = () => {\n        setSlideId(slideId + 1);\n        console.log(profileImage);\n    };\n\n    const clearRegistData = () => {\n        resetContent();\n        resetProfileImage();\n        resetQuestionFirst();\n        resetQuestionSecond();\n        resetQuestionThird();\n    };\n\n    const onEndOfSlide = async () => {\n        registBlog();\n\n        setTimeout(async () => {\n            await Promise.all([\n                createPost({\n                    title: \"자기소개\",\n                    content: questionFirst,\n                    isPush: false,\n                }),\n                createPost({\n                    title: \"학교생활\",\n                    content: questionSecond,\n                    isPush: false,\n                }),\n                createPost({\n                    title: \"졸업 후 현재\",\n                    content: questionThird,\n                    isPush: false,\n                }),\n            ]);\n            clearRegistData();\n\n            history.push(`/mypage/${currentUser.data?.id}`);\n        }, 500);\n    };\n\n    return { onClickNext, onClickBefore, onEndOfSlide };\n};\n\nexport default useSlide;\n","import styled from \"styled-components\";\nimport _ from \"lodash\";\n\nimport useSlide from \"hook/useSlide\";\nimport TextInputWithLabel from \"components/TextInputWithLabel\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { currentUserState } from \"store/user\";\nimport StyledButton from \"components/StyledButton\";\nimport React, { useState } from \"react\";\nimport { contentState, profileImageState } from \"store/regist\";\n\nconst Content = () => {\n    const { onClickNext } = useSlide();\n\n    const currentUser = useRecoilValue(currentUserState);\n    const [content, setContent] = useRecoilState(contentState);\n    const setProfileImage = useSetRecoilState(profileImageState);\n\n    const [previewImage, setPreviewImage] = useState<string>(\"\");\n\n    const handleUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const {\n            target: { files },\n        } = e;\n        const targetFile = files?.[0];\n        setProfileImage(targetFile); // for recoil\n\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            setPreviewImage(reader.result as string);\n        };\n        reader.readAsDataURL(targetFile as Blob);\n    };\n\n    const handleClear = () => {\n        setPreviewImage(\"\");\n    };\n\n    const handleDebounceChange = _.debounce(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            setContent(e.target.value);\n        },\n        300\n    );\n\n    const handleSubmit = () => {\n        if (content === \"\") {\n            alert(\"자기 소개를 작성해주세요 !\");\n            return;\n        }\n        onClickNext();\n    };\n\n    return (\n        <Wrapper>\n            <ImageInputDiv>\n                <ClearPreviewBtn onClick={handleClear} src={previewImage}>\n                    비우기\n                </ClearPreviewBtn>\n                <PreviewImage src={previewImage} alt=\"\" />\n                <ImageInputLabel htmlFor=\"profileImage\">\n                    프로필 사진 등록\n                </ImageInputLabel>\n                <ImageInput\n                    id=\"profileImage\"\n                    type=\"file\"\n                    onChange={handleUpload}\n                />\n            </ImageInputDiv>\n\n            <Info>\n                <Greeting>\n                    <h2>\n                        안녕하세요 <strong>{currentUser.data?.name}</strong>님!\n                    </h2>\n                    <span>\n                        책장 등록 후, 유용한 정보들을 후배들에게 공유해주세요 !\n                    </span>\n                </Greeting>\n\n                <TextInputWithLabel\n                    name=\"content\"\n                    placeholder=\"자기소개\"\n                    onChange={handleDebounceChange}\n                />\n                <StyledButton\n                    type=\"submit\"\n                    label=\"다음 문항\"\n                    onClick={handleSubmit}\n                ></StyledButton>\n            </Info>\n        </Wrapper>\n    );\n};\n\nexport default Content;\n\nconst Wrapper = styled.div`\n    width: 700px;\n    height: 300px;\n\n    background-color: white;\n\n    display: flex;\n`;\n\nconst ImageInputDiv = styled.div`\n    position: relative;\n    width: 40%;\n    height: 100%;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    overflow: hidden;\n`;\n\nconst PreviewImage = styled.img<{ src: string }>`\n    all: unset;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n\n    transform: translateY(${({ src }) => (src === \"\" ? \"100%\" : \"0\")});\n    transition: transform 1s;\n`;\n\nconst ClearPreviewBtn = styled.button<{ src: string }>`\n    all: unset;\n    position: absolute;\n    right: 8px;\n    bottom: 8px;\n    padding: 6px 8px;\n    border-radius: ${({ theme }) => theme.border_intensity};\n    background-color: white;\n    cursor: pointer;\n    z-index: 1;\n\n    transform: translateY(${({ src }) => (src === \"\" ? \"60px\" : \"0\")});\n    transition: background-color 0.3s, color 0.3s, transform 0.3s;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.bold};\n        color: white;\n    }\n`;\n\nconst ImageInputLabel = styled.label`\n    width: 150px;\n    height: 50px;\n    background-color: ${({ theme }) => theme.colors.background};\n    cursor: pointer;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    transition: background-color 0.3s, color 0.3s;\n    &:hover {\n        color: white;\n        background-color: ${({ theme }) => theme.colors.emph};\n    }\n`;\n\nconst ImageInput = styled.input`\n    all: unset;\n    display: none;\n`;\n\nconst Info = styled.div`\n    width: 60%;\n    height: 100%;\n    padding: 12px 16px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n`;\n\nconst Greeting = styled.div`\n    width: 100%;\n    height: auto;\n\n    & > h2 {\n        font-size: 18px;\n        font-weight: 400;\n    }\n    & > span {\n        font-size: 12px;\n    }\n`;\n","import \"react-mde/lib/styles/css/react-mde-all.css\";\nimport MarkdownSection from \"components/MarkdownSection\";\nimport useSlide from \"hook/useSlide\";\nimport { useRecoilState } from \"recoil\";\nimport { questionFirstState } from \"store/regist\";\n\nconst QuestionFirst = () => {\n    const { onClickNext } = useSlide();\n\n    const TITLE: string = \"자기소개\";\n    const [questionFirst, setQuestionFirst] =\n        useRecoilState(questionFirstState);\n\n    const onSubmit = () => {\n        onClickNext();\n    };\n\n    return (\n        <MarkdownSection\n            isReadOnly={true}\n            title={TITLE}\n            content={questionFirst}\n            onContentChange={setQuestionFirst}\n            onSubmit={onSubmit}\n        />\n    );\n};\n\nexport default QuestionFirst;\n","import \"react-mde/lib/styles/css/react-mde-all.css\";\nimport MarkdownSection from \"components/MarkdownSection\";\nimport useSlide from \"hook/useSlide\";\n\nimport { useRecoilState } from \"recoil\";\nimport { questionSecondState } from \"store/regist\";\n\nconst QuestionSecond = () => {\n    const { onClickNext } = useSlide();\n\n    const TITLE: string = \"학교생활\";\n    const [questionSecond, setQuestionSecond] =\n        useRecoilState(questionSecondState);\n\n    const onSubmit = () => {\n        onClickNext();\n    };\n\n    return (\n        <MarkdownSection\n            isReadOnly={true}\n            title={TITLE}\n            content={questionSecond}\n            onContentChange={setQuestionSecond}\n            onSubmit={onSubmit}\n        />\n    );\n};\n\nexport default QuestionSecond;\n","import MarkdownSection from \"components/MarkdownSection\";\nimport { useRecoilState } from \"recoil\";\nimport { questionThirdState } from \"store/regist\";\nimport useSlide from \"hook/useSlide\";\n\nconst QuestionThird = () => {\n    const TITLE: string = \"졸업 후 현재\";\n    const [questionThird, setQuestionThird] =\n        useRecoilState(questionThirdState);\n\n    const { onEndOfSlide } = useSlide();\n\n    const onSubmit = () => {\n        onEndOfSlide();\n    };\n\n    return (\n        <MarkdownSection\n            isReadOnly={true}\n            title={TITLE}\n            content={questionThird}\n            onContentChange={setQuestionThird}\n            onSubmit={onSubmit}\n        />\n    );\n};\n\nexport default QuestionThird;\n","import styled from \"styled-components\";\nimport { useRecoilValue } from \"recoil\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { slideIdState } from \"store/regist\";\nimport Content from \"components/Regist/Content\";\nimport QuestionFirst from \"components/Regist/QuestionFirst\";\nimport QuestionSecond from \"components/Regist/QuestionSecond\";\nimport QuestionThird from \"components/Regist/QuestionThird\";\n\nconst RegistBlogPresenter = () => {\n    const slideId = useRecoilValue(slideIdState);\n\n    const slideList = [\n        <Content />,\n        <QuestionFirst />,\n        <QuestionSecond />,\n        <QuestionThird />,\n    ];\n\n    return (\n        <Wrapper>\n            <TransitionGroup>\n                <CSSTransition\n                    key={slideId}\n                    classNames=\"modal--transition\"\n                    timeout={1000}\n                >\n                    {slideList[slideId]}\n                </CSSTransition>\n            </TransitionGroup>\n        </Wrapper>\n    );\n};\n\nexport default RegistBlogPresenter;\n\nconst Wrapper = styled.section`\n    width: 100vw;\n    height: auto;\n    min-height: 84vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n","import { useEffect } from \"react\";\n\nimport RegistBlogPresenter from \"pages/registBlog/presenter/RegistBlogPresenter\";\nimport { useSetRecoilState } from \"recoil\";\nimport { slideIdState } from \"store/regist\";\n\nconst RegistBlogContainer = () => {\n    const setSlideId = useSetRecoilState(slideIdState);\n\n    useEffect(() => {\n        // if (!currentUser.isSigned || currentUser.data?.isBlog) {\n        //     history.push(\"/\");\n        //     return;\n        // }\n\n        return () => {\n            setSlideId(0);\n        };\n    }, [setSlideId]);\n\n    return <RegistBlogPresenter />;\n};\n\nexport default RegistBlogContainer;\n","import { useEffect, Fragment } from \"react\";\nimport { RouteChildrenProps, withRouter } from \"react-router-dom\";\n\nconst ScrollToTop = ({ location }: RouteChildrenProps) => {\n    useEffect(() => {\n        window.scroll(0, 0);\n    }, [location]);\n    \n    return <Fragment />;\n};\n\nexport default withRouter(ScrollToTop);\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\n\ninterface YearDropdownProps {\n    name: string;\n    startYear?: number;\n    graduateYear: string;\n    setGraduateYear: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst YearDropdown = ({\n    name,\n    startYear = 2000,\n    graduateYear,\n    setGraduateYear,\n}: YearDropdownProps) => {\n    const CheckBokRef = useRef<HTMLInputElement>(null);\n\n    const date = new Date();\n    const currentYear: number = date.getFullYear();\n    const yearDiff: number = currentYear - startYear + 1;\n\n    const YearList: number[] = Array.from(\n        { length: yearDiff },\n        (_, i) => startYear + i\n    );\n\n    const onClick = (e: React.MouseEvent<HTMLSpanElement>) => {\n        if (CheckBokRef.current) CheckBokRef.current.checked = false;\n        setGraduateYear((e.target as Element).id);\n    };\n\n    return (\n        <InputDiv>\n            <InputCheckbox id={name} type=\"checkbox\" ref={CheckBokRef} />\n            <SelectLabel htmlFor={name}>{graduateYear}</SelectLabel>\n            <BackSpan />\n            <OverSpan />\n            <CandidateDiv>\n                {YearList.map((year, index) => (\n                    <CandidateSpan\n                        id={year.toString()}\n                        key={index}\n                        onClick={onClick}\n                    >\n                        {year}\n                    </CandidateSpan>\n                ))}\n            </CandidateDiv>\n        </InputDiv>\n    );\n};\n\nexport default YearDropdown;\n\nconst InputDiv = styled.div`\n    position: relative;\n    width: 100%;\n    height: 60px;\n    /* background-color: white; */\n    margin-bottom: 1rem;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: start;\n`;\n\nconst InputCheckbox = styled.input`\n    all: unset;\n`;\n\nconst SelectLabel = styled.label`\n    width: 100%;\n    margin-left: 6px;\n    font-size: 1.3rem;\n    cursor: pointer;\n`;\n\nconst BackSpan = styled.span`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 3px;\n    background-color: ${({ theme }) => theme.colors.emph};\n    opacity: 0.3;\n`;\n\nconst OverSpan = styled.span`\n    z-index: 100;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 3px;\n    background-color: ${({ theme }) => theme.colors.emph};\n\n    transform: scaleX(0);\n    transform-origin: left;\n    transition: transform 0.3s;\n\n    ${InputCheckbox}:checked ~ & {\n        transform: scaleX(1);\n    }\n`;\n\nconst CandidateDiv = styled.div`\n    position: absolute;\n    top: 110%;\n    left: 0;\n    z-index: 1;\n\n    display: flex;\n    flex-direction: column;\n    /* gap: 8px; */\n\n    width: 100%;\n    height: auto;\n    max-height: 300px;\n    background-color: white;\n    /* padding: 6px; */\n    overflow: scroll;\n\n    opacity: 0;\n    transform: translateX(20px);\n    visibility: hidden;\n    transition: all 0.3s;\n\n    ${InputCheckbox}:checked ~ & {\n        opacity: 1;\n        transform: translateX(0);\n        visibility: visible;\n    }\n`;\n\nconst CandidateSpan = styled.span`\n    display: flex;\n    align-items: center;\n\n    flex-shrink: 0;\n    width: 100%;\n    height: 50px;\n    padding: 6px;\n\n    font-size: 1.2rem;\n    cursor: pointer;\n    transition: all 0.3s;\n\n    &:hover {\n        color: ${({ theme }) => theme.colors.white};\n        background-color: ${({ theme }) => theme.colors.emph};\n    }\n`;\n","import YearDropdown from \"components/Common/YearDropdown\";\nimport StyledButton from \"components/StyledButton\";\nimport { useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { currentUserState } from \"store/user\";\nimport styled from \"styled-components\";\n\nconst GraduatePresenter = () => {\n    const [graduateYear, setGraduateYear] = useState<string>(\"2021\");\n\n    const currentUser = useRecoilValue(currentUserState);\n    const entranceYear: number = currentUser.data?.entranceYear\n        ? parseInt(currentUser.data?.entranceYear)\n        : 2017;\n\n    return (\n        <Wrapper>\n            <StyledMain>\n                <StyledSection>\n                    <StyledH1>\n                        {currentUser.data?.name}님 졸업을 진심으로 축하드립니다\n                        !\n                    </StyledH1>\n                    <StyledP>\n                        졸업의 순간까지 즐거웠던 학교 생활을 후배들에게 공유하며\n                        <br />\n                        추억을 되새김질 해보는 시간을 가져보는 건 어떨까요 !\n                        <br />\n                        <i>\n                            졸업생 계정으로 전환한 후에는 다시 재학생 계정으로\n                            복귀 할 수 없습니다.\n                        </i>\n                    </StyledP>\n                </StyledSection>\n\n                <StyledSection>\n                    <StyledH1>졸업 년도</StyledH1>\n                    <YearDropdown\n                        name=\"어쩌구\"\n                        startYear={entranceYear + 1}\n                        graduateYear={graduateYear}\n                        setGraduateYear={setGraduateYear}\n                    />\n                </StyledSection>\n\n                <StyledButton type=\"submit\" label=\"등록\" />\n            </StyledMain>\n        </Wrapper>\n    );\n};\n\nexport default GraduatePresenter;\n\nconst Wrapper = styled.div`\n    width: 100vw;\n    height: 80vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst StyledMain = styled.main`\n    width: 578px;\n    padding: 10px 12px;\n    background-color: white;\n\n    display: flex;\n    flex-direction: column;\n`;\n\nconst StyledSection = styled.section`\n    margin-bottom: 24px;\n`;\n\nconst StyledH1 = styled.h1`\n    font-size: 22px;\n    color: ${({ theme }) => theme.colors.bold};\n`;\n\nconst StyledP = styled.p`\n    font-size: 12px;\n    opacity: 0.7;\n`;\n","import useUserSession from \"hook/useUserSession\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useRecoilValue } from \"recoil\";\nimport { currentUserState } from \"store/user\";\nimport GraduatePresenter from \"../presenter/GraduatePresenter\";\n\nconst GraduateContainer = () => {\n    const history = useHistory();\n    const { isUserTokenExist } = useUserSession();\n    const currentUser = useRecoilValue(currentUserState);\n\n    useEffect(() => {\n        const isSignedIn = isUserTokenExist();\n\n        if (isSignedIn === null || currentUser.data?.isBlog) history.push(\"/\");\n    }, [currentUser.data?.isBlog, history, isUserTokenExist]);\n\n    return <GraduatePresenter />;\n};\n\nexport default GraduateContainer;\n","import React from \"react\";\n\nimport { BrowserRouter, Route, Switch, withRouter } from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport NavContainer from \"pages/nav/container/NavContainer\";\nimport HomeContainer from \"pages/home/container/HomeContainer\";\nimport SuggestionContainer from \"pages/suggestion/container/SuggestionContainer\";\nimport IntroducePresenter from \"pages/introduce/presenter/IntroducePresenter\";\nimport LibraryContainer from \"pages/library/container/LibraryContainer\";\nimport BookContainer from \"pages/book/container/BookContainer\";\nimport SignInContainer from \"pages/signIn/container/SignInContainer\";\nimport SignInNaverContainer from \"pages/signinNaver/containter/SignInNaverContainer\";\nimport SignInSettingContainer from \"pages/signinSetting/container/SignInSettingContainer\";\nimport SignUpPresenter from \"pages/signUp/presenter/SignUpPresenter\";\nimport MypageContainer from \"pages/mypage/container/MypageContainer\";\nimport WritingPresenter from \"pages/writing/presenter/WritingPresenter\";\nimport PostContainer from \"pages/post/container/PostContainer\";\nimport Notfound from \"pages/notfound/Notfound\";\n\nimport Loading from \"components/Loading/Loading\";\nimport Error from \"components/Error/Error\";\nimport RegistBlogContainer from \"pages/registBlog/container/RegistBlogContainer\";\nimport ScrollToTop from \"components/ScrollToTop\";\nimport GraduateContainer from \"pages/graduate/container/GraduateContainer\";\n\nconst TransitionRouter = withRouter(({ location }) => (\n    <TransitionGroup className=\"page\">\n        <CSSTransition key={location.key} classNames=\"slide\" timeout={1200}>\n            <Switch location={location}>\n                {/* <Route path=\"/\" exact component={HomeContainer} /> */}\n                <Route path=\"/\" exact component={LibraryContainer} />\n                {/* <Route path=\"/:id\" exact component={BookContainer} /> */}\n\n                <Route path=\"/introduce\" component={IntroducePresenter} />\n                {/* <Route path=\"/library\" exact component={LibraryContainer} /> */}\n                <Route path=\"/library/:id\" exact component={BookContainer} />\n                <Route path=\"/suggestion\" component={SuggestionContainer} />\n                <Route path=\"/signin\" exact component={SignInContainer} />\n                <Route path=\"/signin/naver\" component={SignInNaverContainer} />\n                <Route\n                    path=\"/signin/setting\"\n                    component={SignInSettingContainer}\n                />\n                <Route path=\"/signup\" component={SignUpPresenter} />\n                <Route path=\"/mypage/:id\" component={MypageContainer} />\n                <Route path=\"/graduate\" component={GraduateContainer} />\n                <Route path=\"/write\" component={WritingPresenter} />\n                <Route path=\"/post/:id\" component={PostContainer} />\n                <Route path=\"/loading\" component={Loading} />\n                <Route path=\"/error\" component={Error} />\n                <Route path=\"/regist\" component={RegistBlogContainer} />\n                <Route component={Notfound} />\n            </Switch>\n        </CSSTransition>\n    </TransitionGroup>\n));\n\nconst MyRouter = () => {\n    return (\n        <BrowserRouter>\n            <ScrollToTop />\n            <NavContainer />\n            <TransitionRouter />\n        </BrowserRouter>\n    );\n};\n\nexport default MyRouter;\n","import MyRouter from \"router/router\";\nimport useUserSession from \"hook/useUserSession\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n    const { getUserDataWithSession } = useUserSession();\n\n    useEffect(() => {\n        getUserDataWithSession();\n    }, [getUserDataWithSession]);\n\n    return <MyRouter />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// for Recoil\nimport { RecoilRoot } from \"recoil\";\n\n// for styled-components provider\nimport { ThemeProvider } from \"styled-components\";\n\n// for react-query provider\nimport { QueryClientProvider, QueryClient } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\n\nimport theme from \"style/theme\";\n\nimport App from \"./App\";\nimport \"style/index.scss\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n    <RecoilRoot>\n        <QueryClientProvider client={queryClient}>\n            <ThemeProvider theme={theme}>\n                <App />,\n                <ReactQueryDevtools />\n            </ThemeProvider>\n        </QueryClientProvider>\n    </RecoilRoot>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}